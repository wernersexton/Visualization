<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="963" height="504" viewBox="0 0 963 504" version="1.1" onload="init()"><defs><g><symbol overflow="visible" id="glyph0-0"><path style="stroke:none;" d=""/></symbol><symbol overflow="visible" id="glyph0-1"><path style="stroke:none;" d="M 3.109375 -6.0625 L 3.109375 0 L 4.15625 0 L 4.15625 -8.515625 L 3.46875 -8.515625 C 3.09375 -7.203125 2.859375 -7.015625 1.21875 -6.8125 L 1.21875 -6.0625 L 3.109375 -6.0625 Z M 3.109375 -6.0625 "/></symbol><symbol overflow="visible" id="glyph0-2"><path style="stroke:none;" d="M 6.078125 -1.046875 L 1.59375 -1.046875 C 1.703125 -1.734375 2.09375 -2.1875 3.125 -2.796875 L 4.328125 -3.4375 C 5.515625 -4.09375 6.125 -4.96875 6.125 -6.015625 C 6.125 -6.71875 5.84375 -7.375 5.34375 -7.84375 C 4.84375 -8.296875 4.21875 -8.515625 3.40625 -8.515625 C 2.328125 -8.515625 1.53125 -8.125 1.0625 -7.40625 C 0.75 -6.953125 0.625 -6.421875 0.59375 -5.5625 L 1.65625 -5.5625 C 1.6875 -6.125 1.765625 -6.484375 1.90625 -6.75 C 2.1875 -7.265625 2.734375 -7.578125 3.375 -7.578125 C 4.328125 -7.578125 5.046875 -6.90625 5.046875 -5.984375 C 5.046875 -5.3125 4.65625 -4.734375 3.90625 -4.3125 L 2.796875 -3.6875 C 1.015625 -2.671875 0.5 -1.875 0.40625 0 L 6.078125 0 L 6.078125 -1.046875 Z M 6.078125 -1.046875 "/></symbol><symbol overflow="visible" id="glyph0-3"><path style="stroke:none;" d="M 2.65625 -3.90625 L 2.78125 -3.90625 L 3.234375 -3.90625 C 4.390625 -3.90625 4.984375 -3.390625 4.984375 -2.359375 C 4.984375 -1.296875 4.328125 -0.65625 3.234375 -0.65625 C 2.078125 -0.65625 1.515625 -1.234375 1.4375 -2.46875 L 0.390625 -2.46875 C 0.4375 -1.78125 0.546875 -1.34375 0.75 -0.953125 C 1.1875 -0.140625 2.03125 0.28125 3.1875 0.28125 C 4.9375 0.28125 6.078125 -0.765625 6.078125 -2.375 C 6.078125 -3.453125 5.65625 -4.0625 4.625 -4.40625 C 5.421875 -4.71875 5.8125 -5.3125 5.8125 -6.171875 C 5.8125 -7.625 4.84375 -8.515625 3.234375 -8.515625 C 1.515625 -8.515625 0.59375 -7.578125 0.5625 -5.765625 L 1.625 -5.765625 C 1.625 -6.28125 1.6875 -6.5625 1.8125 -6.828125 C 2.046875 -7.296875 2.578125 -7.578125 3.234375 -7.578125 C 4.171875 -7.578125 4.734375 -7.03125 4.734375 -6.125 C 4.734375 -5.53125 4.53125 -5.171875 4.0625 -4.984375 C 3.765625 -4.859375 3.390625 -4.8125 2.65625 -4.796875 L 2.65625 -3.90625 Z M 2.65625 -3.90625 "/></symbol><symbol overflow="visible" id="glyph0-4"><path style="stroke:none;" d="M 3.921875 -2.046875 L 3.921875 0 L 4.984375 0 L 4.984375 -2.046875 L 6.234375 -2.046875 L 6.234375 -2.984375 L 4.984375 -2.984375 L 4.984375 -8.515625 L 4.203125 -8.515625 L 0.34375 -3.15625 L 0.34375 -2.046875 L 3.921875 -2.046875 Z M 3.921875 -2.984375 L 1.265625 -2.984375 L 3.921875 -6.703125 L 3.921875 -2.984375 Z M 3.921875 -2.984375 "/></symbol><symbol overflow="visible" id="glyph0-5"><path style="stroke:none;" d="M 5.71875 -8.515625 L 1.3125 -8.515625 L 0.6875 -3.875 L 1.65625 -3.875 C 2.140625 -4.46875 2.5625 -4.671875 3.21875 -4.671875 C 4.359375 -4.671875 5.078125 -3.890625 5.078125 -2.625 C 5.078125 -1.40625 4.375 -0.65625 3.21875 -0.65625 C 2.296875 -0.65625 1.734375 -1.125 1.46875 -2.09375 L 0.421875 -2.09375 C 0.5625 -1.390625 0.6875 -1.0625 0.9375 -0.75 C 1.421875 -0.09375 2.28125 0.28125 3.234375 0.28125 C 4.953125 0.28125 6.15625 -0.96875 6.15625 -2.765625 C 6.15625 -4.453125 5.046875 -5.609375 3.40625 -5.609375 C 2.8125 -5.609375 2.328125 -5.453125 1.84375 -5.09375 L 2.171875 -7.46875 L 5.71875 -7.46875 L 5.71875 -8.515625 Z M 5.71875 -8.515625 "/></symbol><symbol overflow="visible" id="glyph0-6"><path style="stroke:none;" d="M 5.96875 -6.28125 C 5.765625 -7.6875 4.859375 -8.515625 3.5625 -8.515625 C 2.625 -8.515625 1.78125 -8.046875 1.28125 -7.296875 C 0.75 -6.46875 0.515625 -5.421875 0.515625 -3.875 C 0.515625 -2.453125 0.734375 -1.53125 1.234375 -0.78125 C 1.6875 -0.09375 2.4375 0.28125 3.375 0.28125 C 4.984375 0.28125 6.15625 -0.921875 6.15625 -2.59375 C 6.15625 -4.171875 5.078125 -5.296875 3.546875 -5.296875 C 2.71875 -5.296875 2.046875 -4.96875 1.59375 -4.34375 C 1.609375 -6.421875 2.28125 -7.578125 3.484375 -7.578125 C 4.234375 -7.578125 4.75 -7.109375 4.921875 -6.28125 L 5.96875 -6.28125 Z M 3.421875 -4.359375 C 4.4375 -4.359375 5.078125 -3.640625 5.078125 -2.515625 C 5.078125 -1.4375 4.359375 -0.65625 3.390625 -0.65625 C 2.40625 -0.65625 1.65625 -1.46875 1.65625 -2.5625 C 1.65625 -3.625 2.375 -4.359375 3.421875 -4.359375 Z M 3.421875 -4.359375 "/></symbol><symbol overflow="visible" id="glyph0-7"><path style="stroke:none;" d="M 6.234375 -8.515625 L 0.546875 -8.515625 L 0.546875 -7.46875 L 5.140625 -7.46875 C 3.125 -4.578125 2.296875 -2.796875 1.65625 0 L 2.78125 0 C 3.25 -2.71875 4.3125 -5.0625 6.234375 -7.625 L 6.234375 -8.515625 Z M 6.234375 -8.515625 "/></symbol><symbol overflow="visible" id="glyph0-8"><path style="stroke:none;" d="M 4.6875 -4.46875 C 5.5625 -5 5.859375 -5.4375 5.859375 -6.234375 C 5.859375 -7.578125 4.8125 -8.515625 3.296875 -8.515625 C 1.796875 -8.515625 0.75 -7.578125 0.75 -6.234375 C 0.75 -5.453125 1.03125 -5.015625 1.890625 -4.46875 C 0.921875 -4.015625 0.4375 -3.296875 0.4375 -2.359375 C 0.4375 -0.796875 1.625 0.28125 3.296875 0.28125 C 4.984375 0.28125 6.15625 -0.796875 6.15625 -2.359375 C 6.15625 -3.296875 5.671875 -4.015625 4.6875 -4.46875 Z M 3.296875 -7.578125 C 4.203125 -7.578125 4.78125 -7.046875 4.78125 -6.21875 C 4.78125 -5.421875 4.1875 -4.890625 3.296875 -4.890625 C 2.40625 -4.890625 1.828125 -5.421875 1.828125 -6.234375 C 1.828125 -7.046875 2.40625 -7.578125 3.296875 -7.578125 Z M 3.296875 -4.015625 C 4.359375 -4.015625 5.078125 -3.34375 5.078125 -2.34375 C 5.078125 -1.328125 4.359375 -0.65625 3.28125 -0.65625 C 2.25 -0.65625 1.53125 -1.34375 1.53125 -2.34375 C 1.53125 -3.34375 2.25 -4.015625 3.296875 -4.015625 Z M 3.296875 -4.015625 "/></symbol><symbol overflow="visible" id="glyph0-9"><path style="stroke:none;" d="M 0.953125 0 L 4.890625 0 C 5.71875 0 6.34375 -0.234375 6.796875 -0.734375 C 7.234375 -1.1875 7.46875 -1.8125 7.46875 -2.5 C 7.46875 -3.546875 7 -4.1875 5.875 -4.625 C 6.671875 -4.984375 7.09375 -5.640625 7.09375 -6.53125 C 7.09375 -7.15625 6.859375 -7.734375 6.390625 -8.140625 C 5.9375 -8.5625 5.34375 -8.75 4.5 -8.75 L 0.953125 -8.75 L 0.953125 0 Z M 2.0625 -4.984375 L 2.0625 -7.765625 L 4.21875 -7.765625 C 4.84375 -7.765625 5.203125 -7.6875 5.5 -7.453125 C 5.8125 -7.21875 5.96875 -6.859375 5.96875 -6.375 C 5.96875 -5.90625 5.8125 -5.53125 5.5 -5.296875 C 5.203125 -5.0625 4.84375 -4.984375 4.21875 -4.984375 L 2.0625 -4.984375 Z M 2.0625 -0.984375 L 2.0625 -4 L 4.78125 -4 C 5.328125 -4 5.6875 -3.859375 5.953125 -3.578125 C 6.21875 -3.296875 6.359375 -2.921875 6.359375 -2.484375 C 6.359375 -2.0625 6.21875 -1.6875 5.953125 -1.40625 C 5.6875 -1.109375 5.328125 -0.984375 4.78125 -0.984375 L 2.0625 -0.984375 Z M 2.0625 -0.984375 "/></symbol><symbol overflow="visible" id="glyph0-10"><path style="stroke:none;" d="M 6.15625 -2.8125 C 6.15625 -3.765625 6.078125 -4.34375 5.90625 -4.8125 C 5.5 -5.84375 4.53125 -6.46875 3.359375 -6.46875 C 1.609375 -6.46875 0.484375 -5.125 0.484375 -3.0625 C 0.484375 -1 1.578125 0.28125 3.34375 0.28125 C 4.78125 0.28125 5.765625 -0.546875 6.03125 -1.90625 L 5.015625 -1.90625 C 4.734375 -1.078125 4.171875 -0.640625 3.375 -0.640625 C 2.734375 -0.640625 2.203125 -0.9375 1.859375 -1.46875 C 1.625 -1.828125 1.53125 -2.1875 1.53125 -2.8125 L 6.15625 -2.8125 Z M 1.546875 -3.625 C 1.625 -4.78125 2.34375 -5.546875 3.34375 -5.546875 C 4.328125 -5.546875 5.09375 -4.734375 5.09375 -3.703125 C 5.09375 -3.671875 5.09375 -3.640625 5.078125 -3.625 L 1.546875 -3.625 Z M 1.546875 -3.625 "/></symbol><symbol overflow="visible" id="glyph0-11"><path style="stroke:none;" d="M 5.9375 -8.75 L 4.9375 -8.75 L 4.9375 -5.5 C 4.53125 -6.125 3.859375 -6.46875 3.015625 -6.46875 C 1.375 -6.46875 0.3125 -5.15625 0.3125 -3.15625 C 0.3125 -1.03125 1.359375 0.28125 3.046875 0.28125 C 3.90625 0.28125 4.515625 -0.046875 5.046875 -0.828125 L 5.046875 0 L 5.9375 0 L 5.9375 -8.75 Z M 3.1875 -5.53125 C 4.265625 -5.53125 4.9375 -4.578125 4.9375 -3.078125 C 4.9375 -1.625 4.25 -0.65625 3.1875 -0.65625 C 2.09375 -0.65625 1.359375 -1.625 1.359375 -3.09375 C 1.359375 -4.5625 2.09375 -5.53125 3.1875 -5.53125 Z M 3.1875 -5.53125 "/></symbol><symbol overflow="visible" id="glyph0-12"><path style="stroke:none;" d="M 0.828125 -6.28125 L 0.828125 0 L 1.84375 0 L 1.84375 -3.265625 C 1.84375 -4.15625 2.0625 -4.75 2.546875 -5.09375 C 2.859375 -5.328125 3.15625 -5.40625 3.859375 -5.40625 L 3.859375 -6.4375 C 3.6875 -6.453125 3.59375 -6.46875 3.46875 -6.46875 C 2.8125 -6.46875 2.328125 -6.078125 1.75 -5.140625 L 1.75 -6.28125 L 0.828125 -6.28125 Z M 0.828125 -6.28125 "/></symbol><symbol overflow="visible" id="glyph0-13"><path style="stroke:none;" d="M 3.265625 -6.46875 C 1.5 -6.46875 0.4375 -5.203125 0.4375 -3.09375 C 0.4375 -0.984375 1.484375 0.28125 3.28125 0.28125 C 5.046875 0.28125 6.125 -0.984375 6.125 -3.046875 C 6.125 -5.21875 5.078125 -6.46875 3.265625 -6.46875 Z M 3.28125 -5.546875 C 4.40625 -5.546875 5.078125 -4.625 5.078125 -3.0625 C 5.078125 -1.578125 4.375 -0.640625 3.28125 -0.640625 C 2.15625 -0.640625 1.46875 -1.578125 1.46875 -3.09375 C 1.46875 -4.609375 2.15625 -5.546875 3.28125 -5.546875 Z M 3.28125 -5.546875 "/></symbol><symbol overflow="visible" id="glyph0-14"><path style="stroke:none;" d="M 0.84375 -6.28125 L 0.84375 0 L 1.84375 0 L 1.84375 -3.953125 C 1.84375 -4.859375 2.515625 -5.59375 3.328125 -5.59375 C 4.0625 -5.59375 4.484375 -5.140625 4.484375 -4.328125 L 4.484375 0 L 5.5 0 L 5.5 -3.953125 C 5.5 -4.859375 6.15625 -5.59375 6.96875 -5.59375 C 7.703125 -5.59375 8.140625 -5.125 8.140625 -4.328125 L 8.140625 0 L 9.140625 0 L 9.140625 -4.71875 C 9.140625 -5.84375 8.5 -6.46875 7.3125 -6.46875 C 6.484375 -6.46875 5.96875 -6.21875 5.390625 -5.515625 C 5.015625 -6.1875 4.515625 -6.46875 3.703125 -6.46875 C 2.859375 -6.46875 2.296875 -6.15625 1.765625 -5.40625 L 1.765625 -6.28125 L 0.84375 -6.28125 Z M 0.84375 -6.28125 "/></symbol><symbol overflow="visible" id="glyph0-15"><path style="stroke:none;" d="M 5.25 -4.53125 C 5.25 -5.765625 4.421875 -6.46875 2.96875 -6.46875 C 1.515625 -6.46875 0.5625 -5.71875 0.5625 -4.546875 C 0.5625 -3.5625 1.0625 -3.09375 2.5625 -2.734375 L 3.484375 -2.515625 C 4.1875 -2.34375 4.46875 -2.09375 4.46875 -1.625 C 4.46875 -1.046875 3.875 -0.640625 3 -0.640625 C 2.453125 -0.640625 2 -0.796875 1.75 -1.0625 C 1.59375 -1.25 1.53125 -1.421875 1.46875 -1.875 L 0.40625 -1.875 C 0.453125 -0.421875 1.265625 0.28125 2.921875 0.28125 C 4.5 0.28125 5.515625 -0.5 5.515625 -1.71875 C 5.515625 -2.65625 4.984375 -3.171875 3.734375 -3.46875 L 2.765625 -3.703125 C 1.953125 -3.890625 1.609375 -4.15625 1.609375 -4.59375 C 1.609375 -5.171875 2.125 -5.546875 2.9375 -5.546875 C 3.75 -5.546875 4.171875 -5.203125 4.203125 -4.53125 L 5.25 -4.53125 Z M 5.25 -4.53125 "/></symbol><symbol overflow="visible" id="glyph0-16"><path style="stroke:none;" d="M 5.6875 -2.625 L 6.59375 0 L 7.84375 0 L 4.765625 -8.75 L 3.328125 -8.75 L 0.203125 0 L 1.390625 0 L 2.3125 -2.625 L 5.6875 -2.625 Z M 5.375 -3.5625 L 2.59375 -3.5625 L 4.03125 -7.546875 L 5.375 -3.5625 Z M 5.375 -3.5625 "/></symbol><symbol overflow="visible" id="glyph0-17"><path style="stroke:none;" d="M 1.828125 -8.75 L 0.8125 -8.75 L 0.8125 0 L 1.828125 0 L 1.828125 -8.75 Z M 1.828125 -8.75 "/></symbol><symbol overflow="visible" id="glyph0-18"><path style="stroke:none;" d="M 6.421875 -0.59375 C 6.3125 -0.5625 6.265625 -0.5625 6.203125 -0.5625 C 5.859375 -0.5625 5.65625 -0.75 5.65625 -1.0625 L 5.65625 -4.75 C 5.65625 -5.875 4.84375 -6.46875 3.296875 -6.46875 C 2.390625 -6.46875 1.625 -6.203125 1.21875 -5.734375 C 0.921875 -5.40625 0.796875 -5.046875 0.78125 -4.421875 L 1.78125 -4.421875 C 1.875 -5.203125 2.328125 -5.546875 3.265625 -5.546875 C 4.15625 -5.546875 4.671875 -5.203125 4.671875 -4.609375 L 4.671875 -4.34375 C 4.671875 -3.921875 4.421875 -3.75 3.625 -3.640625 C 2.203125 -3.46875 1.984375 -3.421875 1.609375 -3.265625 C 0.875 -2.96875 0.5 -2.40625 0.5 -1.578125 C 0.5 -0.4375 1.296875 0.28125 2.5625 0.28125 C 3.359375 0.28125 4 0 4.703125 -0.640625 C 4.78125 -0.015625 5.09375 0.28125 5.734375 0.28125 C 5.9375 0.28125 6.09375 0.25 6.421875 0.171875 L 6.421875 -0.59375 Z M 4.671875 -1.984375 C 4.671875 -1.640625 4.578125 -1.4375 4.265625 -1.15625 C 3.859375 -0.796875 3.375 -0.59375 2.78125 -0.59375 C 2 -0.59375 1.546875 -0.96875 1.546875 -1.609375 C 1.546875 -2.265625 1.984375 -2.609375 3.0625 -2.765625 C 4.109375 -2.90625 4.328125 -2.953125 4.671875 -3.109375 L 4.671875 -1.984375 Z M 4.671875 -1.984375 "/></symbol><symbol overflow="visible" id="glyph0-19"><path style="stroke:none;" d=""/></symbol><symbol overflow="visible" id="glyph0-20"><path style="stroke:none;" d="M 7.9375 -6.03125 C 7.59375 -7.953125 6.484375 -8.890625 4.578125 -8.890625 C 3.390625 -8.890625 2.453125 -8.515625 1.796875 -7.796875 C 1.015625 -6.9375 0.578125 -5.6875 0.578125 -4.265625 C 0.578125 -2.828125 1.015625 -1.59375 1.84375 -0.75 C 2.515625 -0.046875 3.390625 0.28125 4.53125 0.28125 C 6.65625 0.28125 7.859375 -0.875 8.125 -3.1875 L 6.96875 -3.1875 C 6.875 -2.59375 6.75 -2.1875 6.578125 -1.84375 C 6.21875 -1.109375 5.46875 -0.703125 4.53125 -0.703125 C 2.796875 -0.703125 1.6875 -2.09375 1.6875 -4.28125 C 1.6875 -6.53125 2.75 -7.90625 4.4375 -7.90625 C 5.140625 -7.90625 5.8125 -7.6875 6.171875 -7.359375 C 6.484375 -7.0625 6.671875 -6.6875 6.796875 -6.03125 L 7.9375 -6.03125 Z M 7.9375 -6.03125 "/></symbol><symbol overflow="visible" id="glyph0-21"><path style="stroke:none;" d="M 5.78125 0 L 5.78125 -6.28125 L 4.78125 -6.28125 L 4.78125 -2.71875 C 4.78125 -1.4375 4.109375 -0.59375 3.078125 -0.59375 C 2.28125 -0.59375 1.78125 -1.078125 1.78125 -1.84375 L 1.78125 -6.28125 L 0.78125 -6.28125 L 0.78125 -1.4375 C 0.78125 -0.390625 1.5625 0.28125 2.78125 0.28125 C 3.703125 0.28125 4.296875 -0.046875 4.890625 -0.875 L 4.890625 0 L 5.78125 0 Z M 5.78125 0 "/></symbol><symbol overflow="visible" id="glyph0-22"><path style="stroke:none;" d="M 0.84375 -6.28125 L 0.84375 0 L 1.84375 0 L 1.84375 -3.46875 C 1.84375 -4.75 2.515625 -5.59375 3.546875 -5.59375 C 4.34375 -5.59375 4.84375 -5.109375 4.84375 -4.359375 L 4.84375 0 L 5.84375 0 L 5.84375 -4.75 C 5.84375 -5.796875 5.0625 -6.46875 3.859375 -6.46875 C 2.921875 -6.46875 2.3125 -6.109375 1.765625 -5.234375 L 1.765625 -6.28125 L 0.84375 -6.28125 Z M 0.84375 -6.28125 "/></symbol><symbol overflow="visible" id="glyph0-23"><path style="stroke:none;" d="M 3.046875 -6.28125 L 2.015625 -6.28125 L 2.015625 -8.015625 L 1.015625 -8.015625 L 1.015625 -6.28125 L 0.171875 -6.28125 L 0.171875 -5.46875 L 1.015625 -5.46875 L 1.015625 -0.71875 C 1.015625 -0.078125 1.453125 0.28125 2.234375 0.28125 C 2.46875 0.28125 2.71875 0.25 3.046875 0.1875 L 3.046875 -0.640625 C 2.921875 -0.609375 2.765625 -0.59375 2.5625 -0.59375 C 2.140625 -0.59375 2.015625 -0.71875 2.015625 -1.15625 L 2.015625 -5.46875 L 3.046875 -5.46875 L 3.046875 -6.28125 Z M 3.046875 -6.28125 "/></symbol><symbol overflow="visible" id="glyph0-24"><path style="stroke:none;" d="M 4.65625 -6.28125 L 2.921875 -1.390625 L 1.3125 -6.28125 L 0.234375 -6.28125 L 2.359375 0.03125 L 1.984375 1.015625 C 1.828125 1.46875 1.59375 1.625 1.171875 1.625 C 1.03125 1.625 0.859375 1.609375 0.640625 1.5625 L 0.640625 2.453125 C 0.859375 2.5625 1.0625 2.609375 1.3125 2.609375 C 1.640625 2.609375 1.984375 2.515625 2.25 2.3125 C 2.5625 2.09375 2.75 1.828125 2.9375 1.3125 L 5.734375 -6.28125 L 4.65625 -6.28125 Z M 4.65625 -6.28125 "/></symbol><symbol overflow="visible" id="glyph0-25"><path style="stroke:none;" d="M 5.609375 0 L 8.078125 -7.328125 L 8.078125 0 L 9.125 0 L 9.125 -8.75 L 7.578125 -8.75 L 5.046875 -1.125 L 2.453125 -8.75 L 0.90625 -8.75 L 0.90625 0 L 1.953125 0 L 1.953125 -7.328125 L 4.4375 0 L 5.609375 0 Z M 5.609375 0 "/></symbol><symbol overflow="visible" id="glyph0-26"><path style="stroke:none;" d="M 1.796875 -6.28125 L 0.796875 -6.28125 L 0.796875 0 L 1.796875 0 L 1.796875 -6.28125 Z M 1.796875 -8.75 L 0.796875 -8.75 L 0.796875 -7.484375 L 1.796875 -7.484375 L 1.796875 -8.75 Z M 1.796875 -8.75 "/></symbol><symbol overflow="visible" id="glyph0-27"><path style="stroke:none;" d="M 7.75 -8.75 L 6.703125 -8.75 L 6.703125 -1.59375 L 2.125 -8.75 L 0.90625 -8.75 L 0.90625 0 L 1.96875 0 L 1.96875 -7.09375 L 6.484375 0 L 7.75 0 L 7.75 -8.75 Z M 7.75 -8.75 "/></symbol><symbol overflow="visible" id="glyph0-28"><path style="stroke:none;" d="M 0.640625 2.609375 L 1.65625 2.609375 L 1.65625 -0.65625 C 2.1875 -0.015625 2.765625 0.28125 3.59375 0.28125 C 5.203125 0.28125 6.28125 -1.03125 6.28125 -3.03125 C 6.28125 -5.140625 5.25 -6.46875 3.578125 -6.46875 C 2.71875 -6.46875 2.046875 -6.078125 1.578125 -5.34375 L 1.578125 -6.28125 L 0.640625 -6.28125 L 0.640625 2.609375 Z M 3.40625 -5.53125 C 4.515625 -5.53125 5.234375 -4.5625 5.234375 -3.0625 C 5.234375 -1.625 4.5 -0.65625 3.40625 -0.65625 C 2.359375 -0.65625 1.65625 -1.625 1.65625 -3.09375 C 1.65625 -4.578125 2.359375 -5.53125 3.40625 -5.53125 Z M 3.40625 -5.53125 "/></symbol><symbol overflow="visible" id="glyph0-29"><path style="stroke:none;" d="M 7.15625 -6.1875 C 7.140625 -7.890625 5.96875 -8.890625 3.953125 -8.890625 C 2.03125 -8.890625 0.84375 -7.90625 0.84375 -6.328125 C 0.84375 -5.25 1.40625 -4.578125 2.5625 -4.28125 L 4.734375 -3.703125 C 5.828125 -3.421875 6.34375 -2.96875 6.34375 -2.296875 C 6.34375 -1.828125 6.078125 -1.34375 5.71875 -1.078125 C 5.359375 -0.84375 4.8125 -0.703125 4.109375 -0.703125 C 3.15625 -0.703125 2.515625 -0.9375 2.09375 -1.4375 C 1.765625 -1.828125 1.625 -2.25 1.625 -2.78125 L 0.578125 -2.78125 C 0.59375 -1.984375 0.75 -1.453125 1.09375 -0.96875 C 1.6875 -0.15625 2.703125 0.28125 4.03125 0.28125 C 5.078125 0.28125 5.921875 0.03125 6.484375 -0.390625 C 7.078125 -0.859375 7.453125 -1.640625 7.453125 -2.40625 C 7.453125 -3.484375 6.78125 -4.265625 5.59375 -4.59375 L 3.390625 -5.1875 C 2.34375 -5.46875 1.953125 -5.8125 1.953125 -6.484375 C 1.953125 -7.375 2.734375 -7.953125 3.90625 -7.953125 C 5.296875 -7.953125 6.078125 -7.3125 6.09375 -6.1875 L 7.15625 -6.1875 Z M 7.15625 -6.1875 "/></symbol><symbol overflow="visible" id="glyph0-30"><path style="stroke:none;" d="M 2.203125 -3.984375 L 6.375 -3.984375 L 6.375 -4.96875 L 2.203125 -4.96875 L 2.203125 -7.765625 L 6.953125 -7.765625 L 6.953125 -8.75 L 1.078125 -8.75 L 1.078125 0 L 2.203125 0 L 2.203125 -3.984375 Z M 2.203125 -3.984375 "/></symbol><symbol overflow="visible" id="glyph0-31"><path style="stroke:none;" d="M 5.65625 -4.171875 C 5.609375 -4.78125 5.46875 -5.1875 5.234375 -5.53125 C 4.796875 -6.125 4.046875 -6.46875 3.171875 -6.46875 C 1.46875 -6.46875 0.375 -5.125 0.375 -3.03125 C 0.375 -1.015625 1.453125 0.28125 3.15625 0.28125 C 4.65625 0.28125 5.609375 -0.625 5.71875 -2.15625 L 4.71875 -2.15625 C 4.546875 -1.15625 4.03125 -0.640625 3.1875 -0.640625 C 2.078125 -0.640625 1.421875 -1.546875 1.421875 -3.03125 C 1.421875 -4.609375 2.0625 -5.546875 3.15625 -5.546875 C 4 -5.546875 4.53125 -5.046875 4.640625 -4.171875 L 5.65625 -4.171875 Z M 5.65625 -4.171875 "/></symbol><symbol overflow="visible" id="glyph1-0"><path style="stroke:none;" d=""/></symbol><symbol overflow="visible" id="glyph1-1"><path style="stroke:none;" d="M -8.515625 -3.296875 C -8.515625 -2.515625 -8.15625 -1.78125 -7.578125 -1.34375 C -6.828125 -0.796875 -5.6875 -0.515625 -4.109375 -0.515625 C -1.25 -0.515625 0.28125 -1.46875 0.28125 -3.296875 C 0.28125 -5.09375 -1.25 -6.078125 -4.046875 -6.078125 C -5.703125 -6.078125 -6.796875 -5.8125 -7.578125 -5.25 C -8.171875 -4.8125 -8.515625 -4.109375 -8.515625 -3.296875 Z M -7.578125 -3.296875 C -7.578125 -4.4375 -6.421875 -5 -4.140625 -5 C -1.734375 -5 -0.59375 -4.453125 -0.59375 -3.28125 C -0.59375 -2.15625 -1.78125 -1.59375 -4.109375 -1.59375 C -6.4375 -1.59375 -7.578125 -2.15625 -7.578125 -3.296875 Z M -7.578125 -3.296875 "/></symbol><symbol overflow="visible" id="glyph1-2"><path style="stroke:none;" d="M -8.515625 -5.71875 L -8.515625 -1.3125 L -3.875 -0.6875 L -3.875 -1.65625 C -4.46875 -2.140625 -4.671875 -2.5625 -4.671875 -3.21875 C -4.671875 -4.359375 -3.890625 -5.078125 -2.625 -5.078125 C -1.40625 -5.078125 -0.65625 -4.375 -0.65625 -3.21875 C -0.65625 -2.296875 -1.125 -1.734375 -2.09375 -1.46875 L -2.09375 -0.421875 C -1.390625 -0.5625 -1.0625 -0.6875 -0.75 -0.9375 C -0.09375 -1.421875 0.28125 -2.28125 0.28125 -3.234375 C 0.28125 -4.953125 -0.96875 -6.15625 -2.765625 -6.15625 C -4.453125 -6.15625 -5.609375 -5.046875 -5.609375 -3.40625 C -5.609375 -2.8125 -5.453125 -2.328125 -5.09375 -1.84375 L -7.46875 -2.171875 L -7.46875 -5.71875 L -8.515625 -5.71875 Z M -8.515625 -5.71875 "/></symbol><symbol overflow="visible" id="glyph1-3"><path style="stroke:none;" d="M -6.0625 -3.109375 L 0 -3.109375 L 0 -4.15625 L -8.515625 -4.15625 L -8.515625 -3.46875 C -7.203125 -3.09375 -7.015625 -2.859375 -6.8125 -1.21875 L -6.0625 -1.21875 L -6.0625 -3.109375 Z M -6.0625 -3.109375 "/></symbol><symbol overflow="visible" id="glyph1-4"><path style="stroke:none;" d="M -1.046875 -6.078125 L -1.046875 -1.59375 C -1.734375 -1.703125 -2.1875 -2.09375 -2.796875 -3.125 L -3.4375 -4.328125 C -4.09375 -5.515625 -4.96875 -6.125 -6.015625 -6.125 C -6.71875 -6.125 -7.375 -5.84375 -7.84375 -5.34375 C -8.296875 -4.84375 -8.515625 -4.21875 -8.515625 -3.40625 C -8.515625 -2.328125 -8.125 -1.53125 -7.40625 -1.0625 C -6.953125 -0.75 -6.421875 -0.625 -5.5625 -0.59375 L -5.5625 -1.65625 C -6.125 -1.6875 -6.484375 -1.765625 -6.75 -1.90625 C -7.265625 -2.1875 -7.578125 -2.734375 -7.578125 -3.375 C -7.578125 -4.328125 -6.90625 -5.046875 -5.984375 -5.046875 C -5.3125 -5.046875 -4.734375 -4.65625 -4.3125 -3.90625 L -3.6875 -2.796875 C -2.671875 -1.015625 -1.875 -0.5 0 -0.40625 L 0 -6.078125 L -1.046875 -6.078125 Z M -1.046875 -6.078125 "/></symbol><symbol overflow="visible" id="glyph1-5"><path style="stroke:none;" d="M -3.90625 -2.65625 L -3.90625 -2.78125 L -3.90625 -3.234375 C -3.90625 -4.390625 -3.390625 -4.984375 -2.359375 -4.984375 C -1.296875 -4.984375 -0.65625 -4.328125 -0.65625 -3.234375 C -0.65625 -2.078125 -1.234375 -1.515625 -2.46875 -1.4375 L -2.46875 -0.390625 C -1.78125 -0.4375 -1.34375 -0.546875 -0.953125 -0.75 C -0.140625 -1.1875 0.28125 -2.03125 0.28125 -3.1875 C 0.28125 -4.9375 -0.765625 -6.078125 -2.375 -6.078125 C -3.453125 -6.078125 -4.0625 -5.65625 -4.40625 -4.625 C -4.71875 -5.421875 -5.3125 -5.8125 -6.171875 -5.8125 C -7.625 -5.8125 -8.515625 -4.84375 -8.515625 -3.234375 C -8.515625 -1.515625 -7.578125 -0.59375 -5.765625 -0.5625 L -5.765625 -1.625 C -6.28125 -1.625 -6.5625 -1.6875 -6.828125 -1.8125 C -7.296875 -2.046875 -7.578125 -2.578125 -7.578125 -3.234375 C -7.578125 -4.171875 -7.03125 -4.734375 -6.125 -4.734375 C -5.53125 -4.734375 -5.171875 -4.53125 -4.984375 -4.0625 C -4.859375 -3.765625 -4.8125 -3.390625 -4.796875 -2.65625 L -3.90625 -2.65625 Z M -3.90625 -2.65625 "/></symbol><symbol overflow="visible" id="glyph1-6"><path style="stroke:none;" d="M -8.75 -7.75 L -8.75 -6.703125 L -1.59375 -6.703125 L -8.75 -2.125 L -8.75 -0.90625 L 0 -0.90625 L 0 -1.96875 L -7.09375 -1.96875 L 0 -6.484375 L 0 -7.75 L -8.75 -7.75 Z M -8.75 -7.75 "/></symbol><symbol overflow="visible" id="glyph1-7"><path style="stroke:none;" d="M 0 -5.78125 L -6.28125 -5.78125 L -6.28125 -4.78125 L -2.71875 -4.78125 C -1.4375 -4.78125 -0.59375 -4.109375 -0.59375 -3.078125 C -0.59375 -2.28125 -1.078125 -1.78125 -1.84375 -1.78125 L -6.28125 -1.78125 L -6.28125 -0.78125 L -1.4375 -0.78125 C -0.390625 -0.78125 0.28125 -1.5625 0.28125 -2.78125 C 0.28125 -3.703125 -0.046875 -4.296875 -0.875 -4.890625 L 0 -4.890625 L 0 -5.78125 Z M 0 -5.78125 "/></symbol><symbol overflow="visible" id="glyph1-8"><path style="stroke:none;" d="M -6.28125 -0.84375 L 0 -0.84375 L 0 -1.84375 L -3.953125 -1.84375 C -4.859375 -1.84375 -5.59375 -2.515625 -5.59375 -3.328125 C -5.59375 -4.0625 -5.140625 -4.484375 -4.328125 -4.484375 L 0 -4.484375 L 0 -5.5 L -3.953125 -5.5 C -4.859375 -5.5 -5.59375 -6.15625 -5.59375 -6.96875 C -5.59375 -7.703125 -5.125 -8.140625 -4.328125 -8.140625 L 0 -8.140625 L 0 -9.140625 L -4.71875 -9.140625 C -5.84375 -9.140625 -6.46875 -8.5 -6.46875 -7.3125 C -6.46875 -6.484375 -6.21875 -5.96875 -5.515625 -5.390625 C -6.1875 -5.015625 -6.46875 -4.515625 -6.46875 -3.703125 C -6.46875 -2.859375 -6.15625 -2.296875 -5.40625 -1.765625 L -6.28125 -1.765625 L -6.28125 -0.84375 Z M -6.28125 -0.84375 "/></symbol><symbol overflow="visible" id="glyph1-9"><path style="stroke:none;" d="M -8.75 -0.640625 L 0 -0.640625 L 0 -1.546875 L -0.796875 -1.546875 C -0.078125 -2.03125 0.28125 -2.65625 0.28125 -3.546875 C 0.28125 -5.203125 -1.078125 -6.28125 -3.171875 -6.28125 C -5.203125 -6.28125 -6.46875 -5.25 -6.46875 -3.59375 C -6.46875 -2.71875 -6.140625 -2.109375 -5.4375 -1.640625 L -8.75 -1.640625 L -8.75 -0.640625 Z M -5.53125 -3.390625 C -5.53125 -4.515625 -4.5625 -5.234375 -3.0625 -5.234375 C -1.625 -5.234375 -0.65625 -4.484375 -0.65625 -3.390625 C -0.65625 -2.34375 -1.625 -1.640625 -3.09375 -1.640625 C -4.578125 -1.640625 -5.53125 -2.34375 -5.53125 -3.390625 Z M -5.53125 -3.390625 "/></symbol><symbol overflow="visible" id="glyph1-10"><path style="stroke:none;" d="M -2.8125 -6.15625 C -3.765625 -6.15625 -4.34375 -6.078125 -4.8125 -5.90625 C -5.84375 -5.5 -6.46875 -4.53125 -6.46875 -3.359375 C -6.46875 -1.609375 -5.125 -0.484375 -3.0625 -0.484375 C -1 -0.484375 0.28125 -1.578125 0.28125 -3.34375 C 0.28125 -4.78125 -0.546875 -5.765625 -1.90625 -6.03125 L -1.90625 -5.015625 C -1.078125 -4.734375 -0.640625 -4.171875 -0.640625 -3.375 C -0.640625 -2.734375 -0.9375 -2.203125 -1.46875 -1.859375 C -1.828125 -1.625 -2.1875 -1.53125 -2.8125 -1.53125 L -2.8125 -6.15625 Z M -3.625 -1.546875 C -4.78125 -1.625 -5.546875 -2.34375 -5.546875 -3.34375 C -5.546875 -4.328125 -4.734375 -5.09375 -3.703125 -5.09375 C -3.671875 -5.09375 -3.640625 -5.09375 -3.625 -5.078125 L -3.625 -1.546875 Z M -3.625 -1.546875 "/></symbol><symbol overflow="visible" id="glyph1-11"><path style="stroke:none;" d="M -6.28125 -0.828125 L 0 -0.828125 L 0 -1.84375 L -3.265625 -1.84375 C -4.15625 -1.84375 -4.75 -2.0625 -5.09375 -2.546875 C -5.328125 -2.859375 -5.40625 -3.15625 -5.40625 -3.859375 L -6.4375 -3.859375 C -6.453125 -3.6875 -6.46875 -3.59375 -6.46875 -3.46875 C -6.46875 -2.8125 -6.078125 -2.328125 -5.140625 -1.75 L -6.28125 -1.75 L -6.28125 -0.828125 Z M -6.28125 -0.828125 "/></symbol><symbol overflow="visible" id="glyph1-12"><path style="stroke:none;" d=""/></symbol><symbol overflow="visible" id="glyph1-13"><path style="stroke:none;" d="M -6.46875 -3.265625 C -6.46875 -1.5 -5.203125 -0.4375 -3.09375 -0.4375 C -0.984375 -0.4375 0.28125 -1.484375 0.28125 -3.28125 C 0.28125 -5.046875 -0.984375 -6.125 -3.046875 -6.125 C -5.21875 -6.125 -6.46875 -5.078125 -6.46875 -3.265625 Z M -5.546875 -3.28125 C -5.546875 -4.40625 -4.625 -5.078125 -3.0625 -5.078125 C -1.578125 -5.078125 -0.640625 -4.375 -0.640625 -3.28125 C -0.640625 -2.15625 -1.578125 -1.46875 -3.09375 -1.46875 C -4.609375 -1.46875 -5.546875 -2.15625 -5.546875 -3.28125 Z M -5.546875 -3.28125 "/></symbol><symbol overflow="visible" id="glyph1-14"><path style="stroke:none;" d="M -6.28125 -3.09375 L -6.28125 -2.046875 L -7.265625 -2.046875 C -7.6875 -2.046875 -7.90625 -2.296875 -7.90625 -2.75 C -7.90625 -2.828125 -7.90625 -2.875 -7.890625 -3.09375 L -8.71875 -3.09375 C -8.765625 -2.875 -8.78125 -2.734375 -8.78125 -2.53125 C -8.78125 -1.609375 -8.25 -1.0625 -7.359375 -1.0625 L -6.28125 -1.0625 L -6.28125 -0.21875 L -5.46875 -0.21875 L -5.46875 -1.0625 L 0 -1.0625 L 0 -2.046875 L -5.46875 -2.046875 L -5.46875 -3.09375 L -6.28125 -3.09375 Z M -6.28125 -3.09375 "/></symbol><symbol overflow="visible" id="glyph1-15"><path style="stroke:none;" d="M -8.75 -0.84375 L 0 -0.84375 L 0 -1.84375 L -3.46875 -1.84375 C -4.75 -1.84375 -5.59375 -2.515625 -5.59375 -3.546875 C -5.59375 -3.859375 -5.484375 -4.1875 -5.296875 -4.421875 C -5.09375 -4.71875 -4.796875 -4.84375 -4.359375 -4.84375 L 0 -4.84375 L 0 -5.828125 L -4.75 -5.828125 C -5.8125 -5.828125 -6.46875 -5.078125 -6.46875 -3.859375 C -6.46875 -2.96875 -6.1875 -2.421875 -5.421875 -1.84375 L -8.75 -1.84375 L -8.75 -0.84375 Z M -8.75 -0.84375 "/></symbol><symbol overflow="visible" id="glyph1-16"><path style="stroke:none;" d="M -4.53125 -5.25 C -5.765625 -5.25 -6.46875 -4.421875 -6.46875 -2.96875 C -6.46875 -1.515625 -5.71875 -0.5625 -4.546875 -0.5625 C -3.5625 -0.5625 -3.09375 -1.0625 -2.734375 -2.5625 L -2.515625 -3.484375 C -2.34375 -4.1875 -2.09375 -4.46875 -1.625 -4.46875 C -1.046875 -4.46875 -0.640625 -3.875 -0.640625 -3 C -0.640625 -2.453125 -0.796875 -2 -1.0625 -1.75 C -1.25 -1.59375 -1.421875 -1.53125 -1.875 -1.46875 L -1.875 -0.40625 C -0.421875 -0.453125 0.28125 -1.265625 0.28125 -2.921875 C 0.28125 -4.5 -0.5 -5.515625 -1.71875 -5.515625 C -2.65625 -5.515625 -3.171875 -4.984375 -3.46875 -3.734375 L -3.703125 -2.765625 C -3.890625 -1.953125 -4.15625 -1.609375 -4.59375 -1.609375 C -5.171875 -1.609375 -5.546875 -2.125 -5.546875 -2.9375 C -5.546875 -3.75 -5.203125 -4.171875 -4.53125 -4.203125 L -4.53125 -5.25 Z M -4.53125 -5.25 "/></symbol><symbol overflow="visible" id="glyph2-0"><path style="stroke:none;" d=""/></symbol><symbol overflow="visible" id="glyph2-1"><path style="stroke:none;" d="M 7.296875 -4.765625 L 7.296875 0 L 9.46875 0 L 9.46875 -10.5 L 7.296875 -10.5 L 7.296875 -6.5625 L 3.140625 -6.5625 L 3.140625 -10.5 L 0.984375 -10.5 L 0.984375 0 L 3.140625 0 L 3.140625 -4.765625 L 7.296875 -4.765625 Z M 7.296875 -4.765625 "/></symbol><symbol overflow="visible" id="glyph2-2"><path style="stroke:none;" d="M 4.34375 -7.90625 C 1.953125 -7.90625 0.5 -6.34375 0.5 -3.78125 C 0.5 -1.21875 1.953125 0.328125 4.34375 0.328125 C 6.71875 0.328125 8.203125 -1.234375 8.203125 -3.734375 C 8.203125 -6.375 6.765625 -7.90625 4.34375 -7.90625 Z M 4.34375 -6.28125 C 5.453125 -6.28125 6.1875 -5.28125 6.1875 -3.765625 C 6.1875 -2.3125 5.4375 -1.296875 4.34375 -1.296875 C 3.25 -1.296875 2.515625 -2.3125 2.515625 -3.78125 C 2.515625 -5.265625 3.25 -6.28125 4.34375 -6.28125 Z M 4.34375 -6.28125 "/></symbol><symbol overflow="visible" id="glyph2-3"><path style="stroke:none;" d="M 7.796875 0 L 7.796875 -7.78125 L 5.78125 -7.78125 L 5.78125 -2.90625 C 5.78125 -1.984375 5.125 -1.390625 4.15625 -1.390625 C 3.28125 -1.390625 2.859375 -1.84375 2.859375 -2.78125 L 2.859375 -7.78125 L 0.828125 -7.78125 L 0.828125 -2.359375 C 0.828125 -0.640625 1.78125 0.328125 3.4375 0.328125 C 4.5 0.328125 5.203125 -0.0625 5.78125 -0.921875 L 5.78125 0 L 7.796875 0 Z M 7.796875 0 "/></symbol><symbol overflow="visible" id="glyph2-4"><path style="stroke:none;" d="M 7.28125 -5.265625 C 7.25 -6.921875 5.984375 -7.90625 3.890625 -7.90625 C 1.921875 -7.90625 0.6875 -6.921875 0.6875 -5.3125 C 0.6875 -4.796875 0.84375 -4.34375 1.125 -4.046875 C 1.390625 -3.78125 1.640625 -3.640625 2.390625 -3.40625 L 4.796875 -2.65625 C 5.296875 -2.5 5.46875 -2.328125 5.46875 -2.015625 C 5.46875 -1.546875 4.90625 -1.25 3.96875 -1.25 C 3.453125 -1.25 3.046875 -1.359375 2.78125 -1.53125 C 2.5625 -1.6875 2.484375 -1.84375 2.390625 -2.265625 L 0.421875 -2.265625 C 0.46875 -0.5625 1.734375 0.328125 4.09375 0.328125 C 5.171875 0.328125 6 0.09375 6.5625 -0.359375 C 7.140625 -0.828125 7.484375 -1.546875 7.484375 -2.3125 C 7.484375 -3.3125 6.984375 -3.96875 5.96875 -4.265625 L 3.421875 -5 C 2.859375 -5.171875 2.703125 -5.28125 2.703125 -5.609375 C 2.703125 -6.03125 3.171875 -6.328125 3.875 -6.328125 C 4.84375 -6.328125 5.3125 -5.984375 5.328125 -5.265625 L 7.28125 -5.265625 Z M 7.28125 -5.265625 "/></symbol><symbol overflow="visible" id="glyph2-5"><path style="stroke:none;" d="M 7.546875 -3.25 C 7.5625 -3.421875 7.5625 -3.5 7.5625 -3.59375 C 7.5625 -4.375 7.453125 -5.09375 7.265625 -5.640625 C 6.734375 -7.0625 5.484375 -7.90625 3.921875 -7.90625 C 1.6875 -7.90625 0.3125 -6.296875 0.3125 -3.6875 C 0.3125 -1.203125 1.671875 0.328125 3.875 0.328125 C 5.625 0.328125 7.03125 -0.65625 7.484375 -2.1875 L 5.484375 -2.1875 C 5.25 -1.5625 4.6875 -1.203125 3.953125 -1.203125 C 3.375 -1.203125 2.90625 -1.453125 2.625 -1.890625 C 2.4375 -2.171875 2.359375 -2.515625 2.328125 -3.25 L 7.546875 -3.25 Z M 2.359375 -4.59375 C 2.5 -5.78125 3 -6.375 3.890625 -6.375 C 4.390625 -6.375 4.859375 -6.125 5.140625 -5.71875 C 5.328125 -5.4375 5.421875 -5.125 5.453125 -4.59375 L 2.359375 -4.59375 Z M 2.359375 -4.59375 "/></symbol><symbol overflow="visible" id="glyph2-6"><path style="stroke:none;" d=""/></symbol><symbol overflow="visible" id="glyph2-7"><path style="stroke:none;" d="M 7.546875 -0.25 C 7.1875 -0.578125 7.09375 -0.796875 7.09375 -1.203125 L 7.09375 -5.515625 C 7.09375 -7.109375 6 -7.90625 3.90625 -7.90625 C 1.796875 -7.90625 0.703125 -7.015625 0.578125 -5.21875 L 2.515625 -5.21875 C 2.625 -6.015625 2.953125 -6.28125 3.953125 -6.28125 C 4.71875 -6.28125 5.109375 -6.015625 5.109375 -5.5 C 5.109375 -5.25 4.984375 -5.015625 4.765625 -4.890625 C 4.5 -4.75 4.5 -4.75 3.5 -4.59375 L 2.6875 -4.453125 C 1.15625 -4.1875 0.40625 -3.40625 0.40625 -2 C 0.40625 -1.34375 0.59375 -0.796875 0.953125 -0.40625 C 1.390625 0.0625 2.078125 0.328125 2.765625 0.328125 C 3.625 0.328125 4.421875 -0.046875 5.125 -0.78125 C 5.125 -0.375 5.171875 -0.234375 5.359375 0 L 7.546875 0 L 7.546875 -0.25 Z M 5.109375 -3.125 C 5.109375 -1.953125 4.53125 -1.296875 3.515625 -1.296875 C 2.84375 -1.296875 2.421875 -1.65625 2.421875 -2.234375 C 2.421875 -2.84375 2.734375 -3.125 3.578125 -3.296875 L 4.265625 -3.421875 C 4.796875 -3.53125 4.890625 -3.5625 5.109375 -3.671875 L 5.109375 -3.125 Z M 5.109375 -3.125 "/></symbol><symbol overflow="visible" id="glyph2-8"><path style="stroke:none;" d="M 2.984375 -10.5 L 0.96875 -10.5 L 0.96875 0 L 2.984375 0 L 2.984375 -10.5 Z M 2.984375 -10.5 "/></symbol><symbol overflow="visible" id="glyph2-9"><path style="stroke:none;" d="M 0.84375 -10.5 L 0.84375 0 L 2.859375 0 L 2.859375 -0.796875 C 3.359375 -0.03125 4.03125 0.328125 5.015625 0.328125 C 6.875 0.328125 8.28125 -1.4375 8.28125 -3.78125 C 8.28125 -4.84375 7.96875 -5.90625 7.453125 -6.65625 C 6.921875 -7.421875 5.96875 -7.90625 5.015625 -7.90625 C 4.046875 -7.90625 3.359375 -7.546875 2.859375 -6.765625 L 2.859375 -10.5 L 0.84375 -10.5 Z M 4.5625 -6.21875 C 5.5625 -6.21875 6.265625 -5.21875 6.265625 -3.78125 C 6.265625 -2.359375 5.5625 -1.359375 4.5625 -1.359375 C 3.546875 -1.359375 2.859375 -2.328125 2.859375 -3.8125 C 2.859375 -5.234375 3.5625 -6.21875 4.5625 -6.21875 Z M 4.5625 -6.21875 "/></symbol><symbol overflow="visible" id="glyph2-10"><path style="stroke:none;" d="M 5.671875 -7.78125 L 4.0625 -2.125 L 2.34375 -7.78125 L 0.125 -7.78125 L 3.03125 0.3125 L 3.03125 0.328125 L 3.03125 0.375 C 3.03125 1.109375 2.484375 1.671875 1.765625 1.671875 C 1.609375 1.671875 1.5 1.65625 1.234375 1.578125 L 1.234375 3.09375 C 1.546875 3.140625 1.71875 3.15625 1.953125 3.15625 C 2.46875 3.15625 3.0625 3.046875 3.421875 2.90625 C 3.96875 2.671875 4.21875 2.34375 4.546875 1.421875 L 7.75 -7.78125 L 5.671875 -7.78125 Z M 5.671875 -7.78125 "/></symbol><symbol overflow="visible" id="glyph2-11"><path style="stroke:none;" d="M 0.90625 -7.78125 L 0.90625 0 L 2.921875 0 L 2.921875 -4.671875 C 2.921875 -5.59375 3.578125 -6.1875 4.546875 -6.1875 C 5.421875 -6.1875 5.84375 -5.71875 5.84375 -4.796875 L 5.84375 0 L 7.859375 0 L 7.859375 -5.21875 C 7.859375 -6.921875 6.921875 -7.90625 5.265625 -7.90625 C 4.203125 -7.90625 3.5 -7.515625 2.921875 -6.65625 L 2.921875 -7.78125 L 0.90625 -7.78125 Z M 0.90625 -7.78125 "/></symbol><symbol overflow="visible" id="glyph2-12"><path style="stroke:none;" d="M 0.859375 -7.78125 L 0.859375 0 L 2.875 0 L 2.875 -4.671875 C 2.875 -5.625 3.40625 -6.1875 4.265625 -6.1875 C 4.9375 -6.1875 5.359375 -5.8125 5.359375 -5.1875 L 5.359375 0 L 7.375 0 L 7.375 -4.671875 C 7.375 -5.625 7.890625 -6.1875 8.765625 -6.1875 C 9.4375 -6.1875 9.859375 -5.8125 9.859375 -5.1875 L 9.859375 0 L 11.875 0 L 11.875 -5.5 C 11.875 -7.015625 10.953125 -7.90625 9.390625 -7.90625 C 8.40625 -7.90625 7.71875 -7.5625 7.109375 -6.75 C 6.734375 -7.484375 5.96875 -7.90625 5 -7.90625 C 4.109375 -7.90625 3.53125 -7.609375 2.859375 -6.8125 L 2.859375 -7.78125 L 0.859375 -7.78125 Z M 0.859375 -7.78125 "/></symbol><symbol overflow="visible" id="glyph2-13"><path style="stroke:none;" d="M 0.90625 -7.78125 L 0.90625 0 L 2.921875 0 L 2.921875 -4.140625 C 2.921875 -5.3125 3.515625 -5.90625 4.703125 -5.90625 C 4.90625 -5.90625 5.0625 -5.890625 5.328125 -5.84375 L 5.328125 -7.890625 C 5.21875 -7.90625 5.140625 -7.90625 5.078125 -7.90625 C 4.15625 -7.90625 3.359375 -7.296875 2.921875 -6.25 L 2.921875 -7.78125 L 0.90625 -7.78125 Z M 0.90625 -7.78125 "/></symbol><symbol overflow="visible" id="glyph2-14"><path style="stroke:none;" d="M 4.515625 -7.625 L 3.3125 -7.625 L 3.3125 -8.390625 C 3.3125 -8.78125 3.484375 -8.984375 3.859375 -8.984375 C 4.03125 -8.984375 4.265625 -8.96875 4.4375 -8.953125 L 4.4375 -10.453125 C 4.0625 -10.484375 3.5625 -10.5 3.28125 -10.5 C 1.9375 -10.5 1.296875 -9.875 1.296875 -8.5625 L 1.296875 -7.625 L 0.203125 -7.625 L 0.203125 -6.28125 L 1.296875 -6.28125 L 1.296875 0 L 3.3125 0 L 3.3125 -6.28125 L 4.515625 -6.28125 L 4.515625 -7.625 Z M 4.515625 -7.625 "/></symbol><symbol overflow="visible" id="glyph2-15"><path style="stroke:none;" d="M 5.828125 0 L 7.84375 0 L 7.84375 -10.5 L 5.828125 -10.5 L 5.828125 -6.765625 C 5.328125 -7.546875 4.65625 -7.90625 3.6875 -7.90625 C 1.828125 -7.90625 0.421875 -6.125 0.421875 -3.78125 C 0.421875 -2.71875 0.734375 -1.65625 1.25 -0.90625 C 1.78125 -0.15625 2.734375 0.328125 3.6875 0.328125 C 4.65625 0.328125 5.328125 -0.03125 5.828125 -0.796875 L 5.828125 0 Z M 4.140625 -6.21875 C 5.15625 -6.21875 5.828125 -5.234375 5.828125 -3.75 C 5.828125 -2.328125 5.140625 -1.359375 4.140625 -1.359375 C 3.125 -1.359375 2.4375 -2.34375 2.4375 -3.78125 C 2.4375 -5.21875 3.125 -6.21875 4.140625 -6.21875 Z M 4.140625 -6.21875 "/></symbol><symbol overflow="visible" id="glyph2-16"><path style="stroke:none;" d="M 7.515625 -4.875 C 7.375 -6.765625 6.109375 -7.90625 4.15625 -7.90625 C 1.84375 -7.90625 0.484375 -6.375 0.484375 -3.734375 C 0.484375 -1.171875 1.828125 0.328125 4.140625 0.328125 C 6.015625 0.328125 7.328125 -0.828125 7.515625 -2.6875 L 5.59375 -2.6875 C 5.328125 -1.6875 4.921875 -1.296875 4.15625 -1.296875 C 3.125 -1.296875 2.5 -2.21875 2.5 -3.734375 C 2.5 -4.46875 2.65625 -5.15625 2.890625 -5.625 C 3.125 -6.046875 3.578125 -6.28125 4.15625 -6.28125 C 4.96875 -6.28125 5.359375 -5.890625 5.59375 -4.875 L 7.515625 -4.875 Z M 7.515625 -4.875 "/></symbol><symbol overflow="visible" id="glyph2-17"><path style="stroke:none;" d="M 4.34375 -7.625 L 3.21875 -7.625 L 3.21875 -9.703125 L 1.203125 -9.703125 L 1.203125 -7.625 L 0.203125 -7.625 L 0.203125 -6.28125 L 1.203125 -6.28125 L 1.203125 -1.5 C 1.203125 -0.28125 1.84375 0.328125 3.171875 0.328125 C 3.609375 0.328125 3.96875 0.28125 4.34375 0.171875 L 4.34375 -1.234375 C 4.140625 -1.203125 4.015625 -1.203125 3.875 -1.203125 C 3.34375 -1.203125 3.21875 -1.359375 3.21875 -2.046875 L 3.21875 -6.28125 L 4.34375 -6.28125 L 4.34375 -7.625 Z M 4.34375 -7.625 "/></symbol></g><clipPath id="clip1"><path d="M 59.039062 59.039062 L 618.757812 59.039062 L 618.757812 431.558594 L 59.039062 431.558594 Z M 59.039062 59.039062 "/></clipPath><clipPath id="clip2"><path d="M 0 0 L 649 0 L 649 505 L 0 505 Z M 0 0 "/></clipPath><clipPath id="clip3"><path d="M 0 0 L 649 0 L 649 505 L 0 505 Z M 0 0 "/></clipPath><clipPath id="clip4"><path d="M 59.039062 59.039062 L 618.757812 59.039062 L 618.757812 431.558594 L 59.039062 431.558594 Z M 59.039062 59.039062 "/></clipPath><symbol id="checkBoxRect" overflow="visible"><rect x="-5" y="-5" width="10" height="10" fill="white" stroke="dimgray" stroke-width="1" cursor="pointer"/></symbol><symbol id="checkBoxCross" overflow="visible"><g pointer-events="none" stroke="dimgray" stroke-width="1"><line x1="-3" y1="-3" x2="3" y2="3"/><line x1="3" y1="-3" x2="-3" y2="3"/></g></symbol></defs><g id="surface0"><rect x="0" y="0" width="648" height="504" style="fill:rgb(100%,100%,100%);fill-opacity:1;stroke:none;"/><g clip-path="url(#clip1)" clip-rule="nonzero" type="plot-region" class="plot-region"><path d="M 79.734375 385.3125 L 79.734375 385.3125 L 153.636719 223.453125 L 227.542969 131.664062 L 301.449219 278.109375 L 375.351562 386.542969 L 449.257812 411.234375 L 523.160156 415.582031 L 597.066406 415.070312 " id="series1" onmouseover="toggleSeries(&quot;series1&quot;, true)" onmouseout="toggleSeries(&quot;series1&quot;, false)" fill="none" stroke-width="0.75" stroke-linecap="round" stroke-linejoin="round" stroke="rgb(89.411765%,10.196078%,10.980392%)" stroke-opacity="1" stroke-miterlimit="10" xlink:title="Alameda County 60410"><title>Alameda County 60410</title></path></g><g clip-path="url(#clip2)" clip-rule="nonzero"><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 79.734375 430.558594 L 597.066406 430.558594 "/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 79.734375 430.558594 L 79.734375 437.761719 "/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 153.636719 430.558594 L 153.636719 437.761719 "/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 227.542969 430.558594 L 227.542969 437.761719 "/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 301.449219 430.558594 L 301.449219 437.761719 "/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 375.351562 430.558594 L 375.351562 437.761719 "/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 449.257812 430.558594 L 449.257812 437.761719 "/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 523.160156 430.558594 L 523.160156 437.761719 "/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 597.066406 430.558594 L 597.066406 437.761719 "/><g style="fill:rgb(0%,0%,0%);fill-opacity:1;"><use xlink:href="#glyph0-1" x="76.234375" y="455.916016"/></g><g style="fill:rgb(0%,0%,0%);fill-opacity:1;"><use xlink:href="#glyph0-2" x="150.136719" y="455.916016"/></g><g style="fill:rgb(0%,0%,0%);fill-opacity:1;"><use xlink:href="#glyph0-3" x="224.042969" y="455.916016"/></g><g style="fill:rgb(0%,0%,0%);fill-opacity:1;"><use xlink:href="#glyph0-4" x="297.949219" y="455.916016"/></g><g style="fill:rgb(0%,0%,0%);fill-opacity:1;"><use xlink:href="#glyph0-5" x="371.851562" y="455.916016"/></g><g style="fill:rgb(0%,0%,0%);fill-opacity:1;"><use xlink:href="#glyph0-6" x="445.757812" y="455.916016"/></g><g style="fill:rgb(0%,0%,0%);fill-opacity:1;"><use xlink:href="#glyph0-7" x="519.660156" y="455.916016"/></g><g style="fill:rgb(0%,0%,0%);fill-opacity:1;"><use xlink:href="#glyph0-8" x="593.566406" y="455.916016"/></g><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 59.039062 416.800781 L 59.039062 75.417969 "/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 59.039062 416.800781 L 51.839844 416.800781 "/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 59.039062 359.902344 L 51.839844 359.902344 "/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 59.039062 303.003906 L 51.839844 303.003906 "/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 59.039062 246.109375 L 51.839844 246.109375 "/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 59.039062 189.210938 L 51.839844 189.210938 "/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 59.039062 132.3125 L 51.839844 132.3125 "/><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 59.039062 75.417969 L 51.839844 75.417969 "/><g style="fill:rgb(0%,0%,0%);fill-opacity:1;"><use xlink:href="#glyph1-1" x="41.197266" y="420.300781"/></g><g style="fill:rgb(0%,0%,0%);fill-opacity:1;"><use xlink:href="#glyph1-2" x="41.197266" y="373.402344"/><use xlink:href="#glyph1-1" x="41.197266" y="366.730469"/><use xlink:href="#glyph1-1" x="41.197266" y="360.058594"/><use xlink:href="#glyph1-1" x="41.197266" y="353.386719"/></g><g style="fill:rgb(0%,0%,0%);fill-opacity:1;"><use xlink:href="#glyph1-3" x="41.197266" y="320.003906"/><use xlink:href="#glyph1-1" x="41.197266" y="313.332031"/><use xlink:href="#glyph1-1" x="41.197266" y="306.660156"/><use xlink:href="#glyph1-1" x="41.197266" y="299.988281"/><use xlink:href="#glyph1-1" x="41.197266" y="293.316406"/></g><g style="fill:rgb(0%,0%,0%);fill-opacity:1;"><use xlink:href="#glyph1-3" x="41.197266" y="263.109375"/><use xlink:href="#glyph1-2" x="41.197266" y="256.4375"/><use xlink:href="#glyph1-1" x="41.197266" y="249.765625"/><use xlink:href="#glyph1-1" x="41.197266" y="243.09375"/><use xlink:href="#glyph1-1" x="41.197266" y="236.421875"/></g><g style="fill:rgb(0%,0%,0%);fill-opacity:1;"><use xlink:href="#glyph1-4" x="41.197266" y="206.210938"/><use xlink:href="#glyph1-1" x="41.197266" y="199.539062"/><use xlink:href="#glyph1-1" x="41.197266" y="192.867188"/><use xlink:href="#glyph1-1" x="41.197266" y="186.195312"/><use xlink:href="#glyph1-1" x="41.197266" y="179.523438"/></g><g style="fill:rgb(0%,0%,0%);fill-opacity:1;"><use xlink:href="#glyph1-4" x="41.197266" y="149.3125"/><use xlink:href="#glyph1-2" x="41.197266" y="142.640625"/><use xlink:href="#glyph1-1" x="41.197266" y="135.96875"/><use xlink:href="#glyph1-1" x="41.197266" y="129.296875"/><use xlink:href="#glyph1-1" x="41.197266" y="122.625"/></g><g style="fill:rgb(0%,0%,0%);fill-opacity:1;"><use xlink:href="#glyph1-5" x="41.197266" y="92.417969"/><use xlink:href="#glyph1-1" x="41.197266" y="85.746094"/><use xlink:href="#glyph1-1" x="41.197266" y="79.074219"/><use xlink:href="#glyph1-1" x="41.197266" y="72.402344"/><use xlink:href="#glyph1-1" x="41.197266" y="65.730469"/></g><path style="fill:none;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 59.039062 430.558594 L 59.039062 430.558594 L 617.761719 430.558594 L 617.761719 59.039062 L 59.039062 59.039062 L 59.039062 430.558594 "/></g><g clip-path="url(#clip3)" clip-rule="nonzero"><g style="fill:rgb(0%,0%,0%);fill-opacity:1;"><use xlink:href="#glyph2-1" x="171.398438" y="34.116211"/><use xlink:href="#glyph2-2" x="181.799805" y="34.116211"/><use xlink:href="#glyph2-3" x="190.601562" y="34.116211"/><use xlink:href="#glyph2-4" x="199.40332" y="34.116211"/><use xlink:href="#glyph2-5" x="207.413086" y="34.116211"/><use xlink:href="#glyph2-6" x="215.422852" y="34.116211"/><use xlink:href="#glyph2-4" x="219.427734" y="34.116211"/><use xlink:href="#glyph2-7" x="227.4375" y="34.116211"/><use xlink:href="#glyph2-8" x="235.447266" y="34.116211"/><use xlink:href="#glyph2-5" x="239.452148" y="34.116211"/><use xlink:href="#glyph2-4" x="247.461914" y="34.116211"/><use xlink:href="#glyph2-6" x="255.47168" y="34.116211"/><use xlink:href="#glyph2-9" x="259.476562" y="34.116211"/><use xlink:href="#glyph2-10" x="268.27832" y="34.116211"/><use xlink:href="#glyph2-6" x="276.288086" y="34.116211"/><use xlink:href="#glyph2-11" x="280.292969" y="34.116211"/><use xlink:href="#glyph2-3" x="289.094727" y="34.116211"/><use xlink:href="#glyph2-12" x="297.896484" y="34.116211"/><use xlink:href="#glyph2-9" x="310.703125" y="34.116211"/><use xlink:href="#glyph2-5" x="319.504883" y="34.116211"/><use xlink:href="#glyph2-13" x="327.514648" y="34.116211"/><use xlink:href="#glyph2-6" x="333.119141" y="34.116211"/><use xlink:href="#glyph2-2" x="337.124023" y="34.116211"/><use xlink:href="#glyph2-14" x="345.925781" y="34.116211"/><use xlink:href="#glyph2-6" x="350.722656" y="34.116211"/><use xlink:href="#glyph2-9" x="354.727539" y="34.116211"/><use xlink:href="#glyph2-5" x="363.529297" y="34.116211"/><use xlink:href="#glyph2-15" x="371.539062" y="34.116211"/><use xlink:href="#glyph2-13" x="380.34082" y="34.116211"/><use xlink:href="#glyph2-2" x="385.945312" y="34.116211"/><use xlink:href="#glyph2-2" x="394.74707" y="34.116211"/><use xlink:href="#glyph2-12" x="403.548828" y="34.116211"/><use xlink:href="#glyph2-4" x="416.355469" y="34.116211"/><use xlink:href="#glyph2-6" x="424.365234" y="34.116211"/><use xlink:href="#glyph2-7" x="428.370117" y="34.116211"/><use xlink:href="#glyph2-11" x="436.379883" y="34.116211"/><use xlink:href="#glyph2-15" x="445.181641" y="34.116211"/><use xlink:href="#glyph2-6" x="453.983398" y="34.116211"/><use xlink:href="#glyph2-16" x="457.988281" y="34.116211"/><use xlink:href="#glyph2-2" x="465.998047" y="34.116211"/><use xlink:href="#glyph2-3" x="474.799805" y="34.116211"/><use xlink:href="#glyph2-11" x="483.601562" y="34.116211"/><use xlink:href="#glyph2-17" x="492.40332" y="34.116211"/><use xlink:href="#glyph2-10" x="497.200195" y="34.116211"/></g><g style="fill:rgb(0%,0%,0%);fill-opacity:1;"><use xlink:href="#glyph0-9" x="310.898438" y="484.716797"/><use xlink:href="#glyph0-10" x="318.902344" y="484.716797"/><use xlink:href="#glyph0-11" x="325.574219" y="484.716797"/><use xlink:href="#glyph0-12" x="332.246094" y="484.716797"/><use xlink:href="#glyph0-13" x="336.242188" y="484.716797"/><use xlink:href="#glyph0-13" x="342.914062" y="484.716797"/><use xlink:href="#glyph0-14" x="349.585938" y="484.716797"/><use xlink:href="#glyph0-15" x="359.582031" y="484.716797"/></g><g style="fill:rgb(0%,0%,0%);fill-opacity:1;"><use xlink:href="#glyph1-6" x="12.396484" y="294.300781"/><use xlink:href="#glyph1-7" x="12.396484" y="285.636719"/><use xlink:href="#glyph1-8" x="12.396484" y="278.964844"/><use xlink:href="#glyph1-9" x="12.396484" y="268.96875"/><use xlink:href="#glyph1-10" x="12.396484" y="262.296875"/><use xlink:href="#glyph1-11" x="12.396484" y="255.625"/><use xlink:href="#glyph1-12" x="12.396484" y="251.628906"/><use xlink:href="#glyph1-13" x="12.396484" y="248.292969"/><use xlink:href="#glyph1-14" x="12.396484" y="241.621094"/><use xlink:href="#glyph1-12" x="12.396484" y="238.285156"/><use xlink:href="#glyph1-15" x="12.396484" y="234.949219"/><use xlink:href="#glyph1-13" x="12.396484" y="228.277344"/><use xlink:href="#glyph1-7" x="12.396484" y="221.605469"/><use xlink:href="#glyph1-16" x="12.396484" y="214.933594"/><use xlink:href="#glyph1-10" x="12.396484" y="208.933594"/><use xlink:href="#glyph1-16" x="12.396484" y="202.261719"/></g></g><g clip-path="url(#clip4)" clip-rule="nonzero"><path d="M 79.734375 396.761719 L 79.734375 396.761719 L 153.636719 273.804688 L 227.542969 123.484375 L 301.449219 237.621094 L 375.351562 380.953125 L 449.257812 413.066406 L 523.160156 416.355469 L 597.066406 416.628906 " id="series2" onmouseover="toggleSeries(&quot;series2&quot;, true)" onmouseout="toggleSeries(&quot;series2&quot;, false)" fill="none" stroke-width="0.75" stroke-linecap="round" stroke-linejoin="round" stroke="rgb(21.568627%,49.411765%,72.156863%)" stroke-opacity="1" stroke-miterlimit="10" xlink:title="Contra Costa County 59381"><title>Contra Costa County 59381</title></path><path d="M 79.734375 411.757812 L 79.734375 411.757812 L 153.636719 385.871094 L 227.542969 364.433594 L 301.449219 391.878906 L 375.351562 411.953125 L 449.257812 416.082031 L 523.160156 416.707031 L 597.066406 416.800781 " id="series3" onmouseover="toggleSeries(&quot;series3&quot;, true)" onmouseout="toggleSeries(&quot;series3&quot;, false)" fill="none" stroke-width="0.75" stroke-linecap="round" stroke-linejoin="round" stroke="rgb(30.196078%,68.627451%,29.019608%)" stroke-opacity="1" stroke-miterlimit="10" xlink:title="Marin County 10450"><title>Marin County 10450</title></path><path d="M 79.734375 415.21875 L 79.734375 415.21875 L 153.636719 401.414062 L 227.542969 388.054688 L 301.449219 405.910156 L 375.351562 416.015625 L 449.257812 416.582031 L 523.160156 416.789062 L 597.066406 416.765625 " id="series4" onmouseover="toggleSeries(&quot;series4&quot;, true)" onmouseout="toggleSeries(&quot;series4&quot;, false)" fill="none" stroke-width="0.75" stroke-linecap="round" stroke-linejoin="round" stroke="rgb(59.607843%,30.588235%,63.921569%)" stroke-opacity="1" stroke-miterlimit="10" xlink:title="Napa County 5066"><title>Napa County 5066</title></path><path d="M 79.734375 400.207031 L 79.734375 400.207031 L 153.636719 376.015625 L 227.542969 392.859375 L 301.449219 408.425781 L 375.351562 414.933594 L 449.257812 416.027344 L 523.160156 416.652344 L 597.066406 416.6875 " id="series5" onmouseover="toggleSeries(&quot;series5&quot;, true)" onmouseout="toggleSeries(&quot;series5&quot;, false)" fill="none" stroke-width="0.75" stroke-linecap="round" stroke-linejoin="round" stroke="rgb(100%,49.803922%,0%)" stroke-opacity="1" stroke-miterlimit="10" xlink:title="San Francisco County 8137"><title>San Francisco County 8137</title></path><path d="M 79.734375 406.773438 L 79.734375 406.773438 L 153.636719 346.804688 L 227.542969 294.789062 L 301.449219 374.367188 L 375.351562 407.503906 L 449.257812 414.785156 L 523.160156 416.492188 L 597.066406 416.183594 " id="series6" onmouseover="toggleSeries(&quot;series6&quot;, true)" onmouseout="toggleSeries(&quot;series6&quot;, false)" fill="none" stroke-width="0.75" stroke-linecap="round" stroke-linejoin="round" stroke="rgb(100%,100%,20%)" stroke-opacity="1" stroke-miterlimit="10" xlink:title="San Mateo County 22558"><title>San Mateo County 22558</title></path><path d="M 79.734375 391.730469 L 79.734375 391.730469 L 153.636719 235.105469 L 227.542969 72.800781 L 301.449219 214.941406 L 375.351562 374.652344 L 449.257812 411.203125 L 523.160156 416.015625 L 597.066406 416.574219 " id="series7" onmouseover="toggleSeries(&quot;series7&quot;, true)" onmouseout="toggleSeries(&quot;series7&quot;, false)" fill="none" stroke-width="0.75" stroke-linecap="round" stroke-linejoin="round" stroke="rgb(65.098039%,33.72549%,15.686275%)" stroke-opacity="1" stroke-miterlimit="10" xlink:title="Santa Clara County 70424"><title>Santa Clara County 70424</title></path><path d="M 79.734375 413.136719 L 79.734375 413.136719 L 153.636719 373.410156 L 227.542969 289.714844 L 301.449219 335.847656 L 375.351562 406.605469 L 449.257812 415.914062 L 523.160156 416.652344 L 597.066406 416.800781 " id="series8" onmouseover="toggleSeries(&quot;series8&quot;, true)" onmouseout="toggleSeries(&quot;series8&quot;, false)" fill="none" stroke-width="0.75" stroke-linecap="round" stroke-linejoin="round" stroke="rgb(96.862745%,50.588235%,74.901961%)" stroke-opacity="1" stroke-miterlimit="10" xlink:title="Solano County 23404"><title>Solano County 23404</title></path><path d="M 79.734375 408.390625 L 79.734375 408.390625 L 153.636719 351.492188 L 227.542969 295.300781 L 301.449219 371.542969 L 375.351562 411.996094 L 449.257812 415.921875 L 523.160156 416.675781 L 597.066406 416.414062 " id="series9" onmouseover="toggleSeries(&quot;series9&quot;, true)" onmouseout="toggleSeries(&quot;series9&quot;, false)" fill="none" stroke-width="0.75" stroke-linecap="round" stroke-linejoin="round" stroke="rgb(60%,60%,60%)" stroke-opacity="1" stroke-miterlimit="10" xlink:title="Sonoma County 21676"><title>Sonoma County 21676</title></path><path style="fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:1;stroke-width:0.75;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 450.160156 59.039062 L 617.761719 59.039062 L 617.761719 203.039062 L 450.160156 203.039062 Z M 450.160156 59.039062 "/><path style="fill:none;stroke-width:2.25;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(89.411765%,10.196078%,10.980392%);stroke-opacity:1;stroke-miterlimit:10;" d="M 460.960938 73.441406 L 482.558594 73.441406 "/><path style="fill:none;stroke-width:2.25;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(21.568627%,49.411765%,72.156863%);stroke-opacity:1;stroke-miterlimit:10;" d="M 460.960938 87.839844 L 482.558594 87.839844 "/><path style="fill:none;stroke-width:2.25;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(30.196078%,68.627451%,29.019608%);stroke-opacity:1;stroke-miterlimit:10;" d="M 460.960938 102.238281 L 482.558594 102.238281 "/><path style="fill:none;stroke-width:2.25;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(59.607843%,30.588235%,63.921569%);stroke-opacity:1;stroke-miterlimit:10;" d="M 460.960938 116.640625 L 482.558594 116.640625 "/><path style="fill:none;stroke-width:2.25;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(100%,49.803922%,0%);stroke-opacity:1;stroke-miterlimit:10;" d="M 460.960938 131.039062 L 482.558594 131.039062 "/><path style="fill:none;stroke-width:2.25;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(100%,100%,20%);stroke-opacity:1;stroke-miterlimit:10;" d="M 460.960938 145.441406 L 482.558594 145.441406 "/><path style="fill:none;stroke-width:2.25;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(65.098039%,33.72549%,15.686275%);stroke-opacity:1;stroke-miterlimit:10;" d="M 460.960938 159.839844 L 482.558594 159.839844 "/><path style="fill:none;stroke-width:2.25;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(96.862745%,50.588235%,74.901961%);stroke-opacity:1;stroke-miterlimit:10;" d="M 460.960938 174.238281 L 482.558594 174.238281 "/><path style="fill:none;stroke-width:2.25;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(60%,60%,60%);stroke-opacity:1;stroke-miterlimit:10;" d="M 460.960938 188.640625 L 482.558594 188.640625 "/><g style="fill:rgb(0%,0%,0%);fill-opacity:1;"><use xlink:href="#glyph0-16" x="493.359375" y="77.376953"/><use xlink:href="#glyph0-17" x="501.363281" y="77.376953"/><use xlink:href="#glyph0-18" x="504.027344" y="77.376953"/><use xlink:href="#glyph0-14" x="510.699219" y="77.376953"/><use xlink:href="#glyph0-10" x="520.695312" y="77.376953"/><use xlink:href="#glyph0-11" x="527.367188" y="77.376953"/><use xlink:href="#glyph0-18" x="534.039062" y="77.376953"/><use xlink:href="#glyph0-19" x="540.710938" y="77.376953"/><use xlink:href="#glyph0-20" x="544.046875" y="77.376953"/><use xlink:href="#glyph0-13" x="552.710938" y="77.376953"/><use xlink:href="#glyph0-21" x="559.382812" y="77.376953"/><use xlink:href="#glyph0-22" x="566.054688" y="77.376953"/><use xlink:href="#glyph0-23" x="572.726562" y="77.376953"/><use xlink:href="#glyph0-24" x="576.0625" y="77.376953"/></g><g style="fill:rgb(0%,0%,0%);fill-opacity:1;"><use xlink:href="#glyph0-20" x="493.359375" y="91.775391"/><use xlink:href="#glyph0-13" x="502.023438" y="91.775391"/><use xlink:href="#glyph0-22" x="508.695312" y="91.775391"/><use xlink:href="#glyph0-23" x="515.367188" y="91.775391"/><use xlink:href="#glyph0-12" x="518.703125" y="91.775391"/><use xlink:href="#glyph0-18" x="522.699219" y="91.775391"/><use xlink:href="#glyph0-19" x="529.371094" y="91.775391"/><use xlink:href="#glyph0-20" x="532.707031" y="91.775391"/><use xlink:href="#glyph0-13" x="541.371094" y="91.775391"/><use xlink:href="#glyph0-15" x="548.042969" y="91.775391"/><use xlink:href="#glyph0-23" x="554.042969" y="91.775391"/><use xlink:href="#glyph0-18" x="557.378906" y="91.775391"/><use xlink:href="#glyph0-19" x="564.050781" y="91.775391"/><use xlink:href="#glyph0-20" x="567.386719" y="91.775391"/><use xlink:href="#glyph0-13" x="576.050781" y="91.775391"/><use xlink:href="#glyph0-21" x="582.722656" y="91.775391"/><use xlink:href="#glyph0-22" x="589.394531" y="91.775391"/><use xlink:href="#glyph0-23" x="596.066406" y="91.775391"/><use xlink:href="#glyph0-24" x="599.402344" y="91.775391"/></g><g style="fill:rgb(0%,0%,0%);fill-opacity:1;"><use xlink:href="#glyph0-25" x="493.359375" y="106.173828"/><use xlink:href="#glyph0-18" x="503.355469" y="106.173828"/><use xlink:href="#glyph0-12" x="510.027344" y="106.173828"/><use xlink:href="#glyph0-26" x="514.023438" y="106.173828"/><use xlink:href="#glyph0-22" x="516.6875" y="106.173828"/><use xlink:href="#glyph0-19" x="523.359375" y="106.173828"/><use xlink:href="#glyph0-20" x="526.695312" y="106.173828"/><use xlink:href="#glyph0-13" x="535.359375" y="106.173828"/><use xlink:href="#glyph0-21" x="542.03125" y="106.173828"/><use xlink:href="#glyph0-22" x="548.703125" y="106.173828"/><use xlink:href="#glyph0-23" x="555.375" y="106.173828"/><use xlink:href="#glyph0-24" x="558.710938" y="106.173828"/></g><g style="fill:rgb(0%,0%,0%);fill-opacity:1;"><use xlink:href="#glyph0-27" x="493.359375" y="120.576172"/><use xlink:href="#glyph0-18" x="502.023438" y="120.576172"/><use xlink:href="#glyph0-28" x="508.695312" y="120.576172"/><use xlink:href="#glyph0-18" x="515.367188" y="120.576172"/><use xlink:href="#glyph0-19" x="522.039062" y="120.576172"/><use xlink:href="#glyph0-20" x="525.375" y="120.576172"/><use xlink:href="#glyph0-13" x="534.039062" y="120.576172"/><use xlink:href="#glyph0-21" x="540.710938" y="120.576172"/><use xlink:href="#glyph0-22" x="547.382812" y="120.576172"/><use xlink:href="#glyph0-23" x="554.054688" y="120.576172"/><use xlink:href="#glyph0-24" x="557.390625" y="120.576172"/></g><g style="fill:rgb(0%,0%,0%);fill-opacity:1;"><use xlink:href="#glyph0-29" x="493.359375" y="134.974609"/><use xlink:href="#glyph0-18" x="501.363281" y="134.974609"/><use xlink:href="#glyph0-22" x="508.035156" y="134.974609"/><use xlink:href="#glyph0-19" x="514.707031" y="134.974609"/><use xlink:href="#glyph0-30" x="518.042969" y="134.974609"/><use xlink:href="#glyph0-12" x="525.375" y="134.974609"/><use xlink:href="#glyph0-18" x="529.371094" y="134.974609"/><use xlink:href="#glyph0-22" x="536.042969" y="134.974609"/><use xlink:href="#glyph0-31" x="542.714844" y="134.974609"/><use xlink:href="#glyph0-26" x="548.714844" y="134.974609"/><use xlink:href="#glyph0-15" x="551.378906" y="134.974609"/><use xlink:href="#glyph0-31" x="557.378906" y="134.974609"/><use xlink:href="#glyph0-13" x="563.378906" y="134.974609"/><use xlink:href="#glyph0-19" x="570.050781" y="134.974609"/><use xlink:href="#glyph0-20" x="573.386719" y="134.974609"/><use xlink:href="#glyph0-13" x="582.050781" y="134.974609"/><use xlink:href="#glyph0-21" x="588.722656" y="134.974609"/><use xlink:href="#glyph0-22" x="595.394531" y="134.974609"/><use xlink:href="#glyph0-23" x="602.066406" y="134.974609"/><use xlink:href="#glyph0-24" x="605.402344" y="134.974609"/></g><g style="fill:rgb(0%,0%,0%);fill-opacity:1;"><use xlink:href="#glyph0-29" x="493.359375" y="149.376953"/><use xlink:href="#glyph0-18" x="501.363281" y="149.376953"/><use xlink:href="#glyph0-22" x="508.035156" y="149.376953"/><use xlink:href="#glyph0-19" x="514.707031" y="149.376953"/><use xlink:href="#glyph0-25" x="518.042969" y="149.376953"/><use xlink:href="#glyph0-18" x="528.039062" y="149.376953"/><use xlink:href="#glyph0-23" x="534.710938" y="149.376953"/><use xlink:href="#glyph0-10" x="538.046875" y="149.376953"/><use xlink:href="#glyph0-13" x="544.71875" y="149.376953"/><use xlink:href="#glyph0-19" x="551.390625" y="149.376953"/><use xlink:href="#glyph0-20" x="554.726562" y="149.376953"/><use xlink:href="#glyph0-13" x="563.390625" y="149.376953"/><use xlink:href="#glyph0-21" x="570.0625" y="149.376953"/><use xlink:href="#glyph0-22" x="576.734375" y="149.376953"/><use xlink:href="#glyph0-23" x="583.40625" y="149.376953"/><use xlink:href="#glyph0-24" x="586.742188" y="149.376953"/></g><g style="fill:rgb(0%,0%,0%);fill-opacity:1;"><use xlink:href="#glyph0-29" x="493.359375" y="163.775391"/><use xlink:href="#glyph0-18" x="501.363281" y="163.775391"/><use xlink:href="#glyph0-22" x="508.035156" y="163.775391"/><use xlink:href="#glyph0-23" x="514.707031" y="163.775391"/><use xlink:href="#glyph0-18" x="518.042969" y="163.775391"/><use xlink:href="#glyph0-19" x="524.714844" y="163.775391"/><use xlink:href="#glyph0-20" x="528.050781" y="163.775391"/><use xlink:href="#glyph0-17" x="536.714844" y="163.775391"/><use xlink:href="#glyph0-18" x="539.378906" y="163.775391"/><use xlink:href="#glyph0-12" x="546.050781" y="163.775391"/><use xlink:href="#glyph0-18" x="550.046875" y="163.775391"/><use xlink:href="#glyph0-19" x="556.71875" y="163.775391"/><use xlink:href="#glyph0-20" x="560.054688" y="163.775391"/><use xlink:href="#glyph0-13" x="568.71875" y="163.775391"/><use xlink:href="#glyph0-21" x="575.390625" y="163.775391"/><use xlink:href="#glyph0-22" x="582.0625" y="163.775391"/><use xlink:href="#glyph0-23" x="588.734375" y="163.775391"/><use xlink:href="#glyph0-24" x="592.070312" y="163.775391"/></g><g style="fill:rgb(0%,0%,0%);fill-opacity:1;"><use xlink:href="#glyph0-29" x="493.359375" y="178.173828"/><use xlink:href="#glyph0-13" x="501.363281" y="178.173828"/><use xlink:href="#glyph0-17" x="508.035156" y="178.173828"/><use xlink:href="#glyph0-18" x="510.699219" y="178.173828"/><use xlink:href="#glyph0-22" x="517.371094" y="178.173828"/><use xlink:href="#glyph0-13" x="524.042969" y="178.173828"/><use xlink:href="#glyph0-19" x="530.714844" y="178.173828"/><use xlink:href="#glyph0-20" x="534.050781" y="178.173828"/><use xlink:href="#glyph0-13" x="542.714844" y="178.173828"/><use xlink:href="#glyph0-21" x="549.386719" y="178.173828"/><use xlink:href="#glyph0-22" x="556.058594" y="178.173828"/><use xlink:href="#glyph0-23" x="562.730469" y="178.173828"/><use xlink:href="#glyph0-24" x="566.066406" y="178.173828"/></g><g style="fill:rgb(0%,0%,0%);fill-opacity:1;"><use xlink:href="#glyph0-29" x="493.359375" y="192.576172"/><use xlink:href="#glyph0-13" x="501.363281" y="192.576172"/><use xlink:href="#glyph0-22" x="508.035156" y="192.576172"/><use xlink:href="#glyph0-13" x="514.707031" y="192.576172"/><use xlink:href="#glyph0-14" x="521.378906" y="192.576172"/><use xlink:href="#glyph0-18" x="531.375" y="192.576172"/><use xlink:href="#glyph0-19" x="538.046875" y="192.576172"/><use xlink:href="#glyph0-20" x="541.382812" y="192.576172"/><use xlink:href="#glyph0-13" x="550.046875" y="192.576172"/><use xlink:href="#glyph0-21" x="556.71875" y="192.576172"/><use xlink:href="#glyph0-22" x="563.390625" y="192.576172"/><use xlink:href="#glyph0-23" x="570.0625" y="192.576172"/><use xlink:href="#glyph0-24" x="573.398438" y="192.576172"/></g></g></g><script xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" type="text/ecmascript"><![CDATA[var color = [ null ] ;

var factor = [        8 ];]]></script><script xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" type="text/ecmascript" xlink:href="file:///Users/duncan/Rpackages/SVGAnnotation/JavaScript/imatplot.js"/><script xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" type="text/ecmascript"><![CDATA[
function init() {
var arr = new Array();
arr[ 0 ] = 'Alameda County' ;
arr[ 1 ] = 'Contra Costa County' ;
arr[ 2 ] = 'Marin County' ;
arr[ 3 ] = 'Napa County' ;
arr[ 4 ] = 'San Francisco County' ;
arr[ 5 ] = 'San Mateo County' ;
arr[ 6 ] = 'Santa Clara County' ;
arr[ 7 ] = 'Solano County' ;
arr[ 8 ] = 'Sonoma County' ;
createRadioBoxList( 9 , 648 , arr, toggle , 'series' , 1 );
}]]></script><g id="checkboxes"/><script xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" type="text/ecmascript"><![CDATA[var isHTML = [ false ];]]></script><script xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" type="text/ecmascript" originalSource="/Users/duncan/Rpackages/SVGAnnotation/SVGGUI/helper_functions.js"><![CDATA[/**
 * @fileoverview
 * 
 * ECMAScript <a href="http://www.carto.net/papers/svg/resources/helper_functions.html">helper functions</a>, main purpose is to serve in SVG mapping or other SVG based web applications
 *
 * This ECMA script library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library (http://www.carto.net/papers/svg/resources/lesser_gpl.txt); if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Please report bugs and send improvements to neumann@karto.baug.ethz.ch
 * If you use these scripts, please link to the original (http://www.carto.net/papers/svg/resources/helper_functions.html)
 * somewhere in the source-code-comment or the "about" of your project and give credits, thanks!
 * 
 * See <a href="js_docs_out/overview-summary-helper_functions.js.html">documentation</a>. 
 * 
 * @author Andreas Neumann a.neumann@carto.net
 * @copyright LGPL 2.1 <a href="http://www.gnu.org/copyleft/lesser.txt">Gnu LGPL 2.1</a>
 * @credits Bruce Rindahl, numerous people on svgdevelopers@yahoogroups.com
 */

//global variables necessary to create elements in these namespaces, do not delete them!!!!

/**
 * This variable is a shortcut to the full URL of the SVG namespace
 * @final
 * @type String
 */
var svgNS = "http://www.w3.org/2000/svg";

/**
 * This variable is a shortcut to the full URL of the XLink namespace
 * @final
 * @type String
 */
var xlinkNS = "http://www.w3.org/1999/xlink";

/**
 * This variable is a shortcut to the full URL of the attrib namespace
 * @final
 * @type String
 */
var cartoNS = "http://www.carto.net/attrib";

/**
 * This variable is a alias to the full URL of the attrib namespace
 * @final
 * @type String
 */
var attribNS = "http://www.carto.net/attrib";

/**
 * This variable is a alias to the full URL of the Batik extension namespace
 * @final
 * @type String
 */
var batikNS = "http://xml.apache.org/batik/ext";

/**
 * Returns the polar direction from a given vector
 * @param {Number} xdiff	the x-part of the vector
 * @param {Number} ydiff	the y-part of the vector
 * @return direction		the direction in radians
 * @type Number
 * @version 1.0 (2007-04-30)
 * @see #toPolarDist
 * @see #toRectX
 * @see #toRectY
 */
function toPolarDir(xdiff,ydiff) {
   var direction = (Math.atan2(ydiff,xdiff));
   return(direction);
}

/**
 * Returns the polar distance from a given vector
 * @param {Number} xdiff	the x-part of the vector
 * @param {Number} ydiff	the y-part of the vector
 * @return distance			the distance
 * @type Number
 * @version 1.0 (2007-04-30)
 * @see #toPolarDir
 * @see #toRectX
 * @see #toRectY
 */
function toPolarDist(xdiff,ydiff) {
   var distance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);
   return(distance);
}

/**
 * Returns the x-part of a vector from a given direction and distance
 * @param {Number} direction	the direction (in radians)
 * @param {Number} distance		the distance
 * @return x					the x-part of the vector
 * @type Number
 * @version 1.0 (2007-04-30)
 * @see #toPolarDist
 * @see #toPolarDir
 * @see #toRectY
 */
function toRectX(direction,distance) {
   var x = distance * Math.cos(direction);
   return(x);
}

/**
 * Returns the y-part of the vector from a given direction and distance
 * @param {Number} direction	the direction (in radians)
 * @param {Number} distance		the distance
 * @return y					the y-part of the vector
 * @type Number
 * @version 1.0 (2007-04-30)
 * @see #toPolarDist
 * @see #toPolarDir
 * @see #toRectX
 */
function toRectY(direction,distance) {
   y = distance * Math.sin(direction);
   return(y);
}

/**
 * Converts degrees to radians
 * @param {Number} deg	the degree value
 * @return rad			the radians value
 * @type Number
 * @version 1.0 (2007-04-30)
 * @see #RadToDeg
 */
function DegToRad(deg) {
     return (deg / 180.0 * Math.PI);
}

/**
 * Converts radians to degrees
 * @param {Number} rad	the radians value
 * @return deg			the degree value
 * @type Number
 * @version 1.0 (2007-04-30)
 * @see #DegToRad
 */
function RadToDeg(rad) {
     return (rad / Math.PI * 180.0);
}

/**
 * Converts decimal degrees to degrees, minutes, seconds
 * @param {Number} dd	the decimal degree value
 * @return degrees		the degree values in the following notation: {deg:degrees,min:minutes,sec:seconds}
 * @type literal
 * @version 1.0 (2007-04-30)
 * @see #dms2dd
 */
function dd2dms(dd) {
        var minutes = (Math.abs(dd) - Math.floor(Math.abs(dd))) * 60;
        var seconds = (minutes - Math.floor(minutes)) * 60;
        var minutes = Math.floor(minutes);
        if (dd >= 0) {
            var degrees = Math.floor(dd);
        }
        else {
            var degrees = Math.ceil(dd);       
        }
        return {deg:degrees,min:minutes,sec:seconds};
}

/**
 * Converts degrees, minutes and seconds to decimal degrees
 * @param {Number} deg	the degree value
 * @param {Number} min	the minute value
 * @param {Number} sec	the second value
 * @return deg			the decimal degree values
 * @type Number
 * @version 1.0 (2007-04-30)
 * @see #dd2dms
 */
function dms2dd(deg,min,sec) {
	if (deg < 0) {
		return deg - (min / 60) - (sec / 3600);
	}
	else {
		return deg + (min / 60) + (sec / 3600);
	}
}

/**
 * log function, missing in the standard Math object
 * @param {Number} x	the value where the log function should be applied to
 * @param {Number} b	the base value for the log function
 * @return logResult	the result of the log function
 * @type Number
 * @version 1.0 (2007-04-30)
 */
function log(x,b) {
	if(b==null) b=Math.E;
	return Math.log(x)/Math.log(b);
}

/**
 * interpolates a value (e.g. elevation) bilinearly based on the position within a cell with 4 corner values
 * @param {Number} za		the value at the upper left corner of the cell
 * @param {Number} zb		the value at the upper right corner of the cell
 * @param {Number} zc		the value at the lower right corner of the cell
 * @param {Number} zd		the value at the lower left corner of the cell
 * @param {Number} xpos		the x position of the point where a new value should be interpolated
 * @param {Number} ypos		the y position of the point where a new value should be interpolated
 * @param {Number} ax		the x position of the lower left corner of the cell
 * @param {Number} ay		the y position of the lower left corner of the cell
 * @param {Number} cellsize	the size of the cell
 * @return interpol_value	the result of the bilinear interpolation function
 * @type Number
 * @version 1.0 (2007-04-30)
 */
function intBilinear(za,zb,zc,zd,xpos,ypos,ax,ay,cellsize) { //bilinear interpolation function
	var e = (xpos - ax) / cellsize;
	var f = (ypos - ay) / cellsize;

	//calculation of weights
	var wa = (1 - e) * (1 - f);
	var wb = e * (1 - f);
	var wc = e * f;
	var wd = f * (1 - e);

	var interpol_value = wa * zc + wb * zd + wc * za + wd * zb;
	return interpol_value;	
}

/**
 * tests if a given point is left or right of a given line
 * @param {Number} pointx		the x position of the given point
 * @param {Number} pointy		the y position of the given point
 * @param {Number} linex1		the x position of line's start point
 * @param {Number} liney1		the y position of line's start point
 * @param {Number} linex2		the x position of line's end point
 * @param {Number} liney2		the y position of line's end point
 * @return leftof				the result of the leftOfTest, 1 means leftOf, 0 means rightOf
 * @type Number (integer, 0|1)
 * @version 1.0 (2007-04-30)
 */
function leftOfTest(pointx,pointy,linex1,liney1,linex2,liney2) {
	var result = (liney1 - pointy) * (linex2 - linex1) - (linex1 - pointx) * (liney2 - liney1);
	if (result < 0) {
		var leftof = 1; //case left of
	}
	else {
		var leftof = 0; //case left of	
	}
	return leftof;
}

/**
 * calculates the distance between a given point and a given line
 * @param {Number} pointx		the x position of the given point
 * @param {Number} pointy		the y position of the given point
 * @param {Number} linex1		the x position of line's start point
 * @param {Number} liney1		the y position of line's start point
 * @param {Number} linex2		the x position of line's end point
 * @param {Number} liney2		the y position of line's end point
 * @return distance				the result of the leftOfTest, 1 means leftOf, 0 means rightOf
 * @type Number
 * @version 1.0 (2007-04-30)
 */
function distFromLine(xpoint,ypoint,linex1,liney1,linex2,liney2) {
	var dx = linex2 - linex1;
	var dy = liney2 - liney1;
	var distance = (dy * (xpoint - linex1) - dx * (ypoint - liney1)) / Math.sqrt(Math.pow(dx,2) + Math.pow(dy,2));
	return distance;
}

/**
 * calculates the angle between two vectors (lines)
 * @param {Number} ax		the x part of vector a
 * @param {Number} ay		the y part of vector a
 * @param {Number} bx		the x part of vector b
 * @param {Number} by		the y part of vector b
 * @return angle			the angle in radians
 * @type Number
 * @version 1.0 (2007-04-30)
 * @credits <a href="http://www.mathe-online.at/mathint/vect2/i.html#Winkel">Mathe Online (Winkel)</a>
 */
function angleBetwTwoLines(ax,ay,bx,by) {
	var angle = Math.acos((ax * bx + ay * by) / (Math.sqrt(Math.pow(ax,2) + Math.pow(ay,2)) * Math.sqrt(Math.pow(bx,2) + Math.pow(by,2))));
	return angle;
}

/**
 * calculates the bisector vector for two given vectors
 * @param {Number} ax		the x part of vector a
 * @param {Number} ay		the y part of vector a
 * @param {Number} bx		the x part of vector b
 * @param {Number} by		the y part of vector b
 * @return c				the resulting vector as an Array, c[0] is the x part of the vector, c[1] is the y part
 * @type Array
 * @version 1.0 (2007-04-30)
 * @credits <a href="http://www.mathe-online.at/mathint/vect1/i.html#Winkelsymmetrale">Mathe Online (Winkelsymmetrale)</a>
 * see #calcBisectorAngle
 *  */
function calcBisectorVector(ax,ay,bx,by) {
	var betraga = Math.sqrt(Math.pow(ax,2) + Math.pow(ay,2));
	var betragb = Math.sqrt(Math.pow(bx,2) + Math.pow(by,2));
	var c = new Array();
	c[0] = ax / betraga + bx / betragb;
	c[1] = ay / betraga + by / betragb;
	return c;
}

/**
 * calculates the bisector angle for two given vectors
 * @param {Number} ax		the x part of vector a
 * @param {Number} ay		the y part of vector a
 * @param {Number} bx		the x part of vector b
 * @param {Number} by		the y part of vector b
 * @return angle			the bisector angle in radians
 * @type Number
 * @version 1.0 (2007-04-30)
 * @credits <a href="http://www.mathe-online.at/mathint/vect1/i.html#Winkelsymmetrale">Mathe Online (Winkelsymmetrale)</a>
 * see #calcBisectorVector
 * */
function calcBisectorAngle(ax,ay,bx,by) {
	var betraga = Math.sqrt(Math.pow(ax,2) + Math.pow(ay,2));
	var betragb = Math.sqrt(Math.pow(bx,2) + Math.pow(by,2));
	var c1 = ax / betraga + bx / betragb;
	var c2 = ay / betraga + by / betragb;
	var angle = toPolarDir(c1,c2);
	return angle;
}

/**
 * calculates the intersection point of two given lines
 * @param {Number} line1x1	the x the start point of line 1
 * @param {Number} line1y1	the y the start point of line 1
 * @param {Number} line1x2	the x the end point of line 1
 * @param {Number} line1y2	the y the end point of line 1
 * @return interSectPoint	the intersection point, interSectPoint.x contains x-part, interSectPoint.y the y-part of the resulting coordinate
 * @type Object
 * @version 1.0 (2007-04-30)
 * @credits <a href="http://astronomy.swin.edu.au/~pbourke/geometry/lineline2d/">P. Bourke</a>
 */
function intersect2lines(line1x1,line1y1,line1x2,line1y2,line2x1,line2y1,line2x2,line2y2) {
	var interSectPoint = new Object();
	var denominator = (line2y2 - line2y1)*(line1x2 - line1x1) - (line2x2 - line2x1)*(line1y2 - line1y1);
	if (denominator == 0) {
		alert("lines are parallel");
	}
	else {
		var ua = ((line2x2 - line2x1)*(line1y1 - line2y1) - (line2y2 - line2y1)*(line1x1 - line2x1)) / denominator;
		var ub = ((line1x2 - line1x1)*(line1y1 - line2y1) - (line1y2 - line1y1)*(line1x1 - line2x1)) / denominator;
	}
	interSectPoint["x"] = line1x1 + ua * (line1x2 - line1x1);
	interSectPoint["y"] = line1y1 + ua * (line1y2 - line1y1);
	return interSectPoint;
}

/**
 * reformats a given number to a string by adding separators at every third digit
 * @param {String|Number} inputNumber	the input number, can be of type number or string
 * @param {String} separator			the separator, e.g. ' or ,
 * @return newString					the intersection point, interSectPoint.x contains x-part, interSectPoint.y the y-part of the resulting coordinate
 * @type String
 * @version 1.0 (2007-04-30)
 */
function formatNumberString(inputNumber,separator) {
	//check if of type string, if number, convert it to string
	if (typeof(inputNumber) == "Number") {
		var myTempString = inputNumber.toString();
	}
	else {
		var myTempString = inputNumber;
	}
	var newString="";
	//if it contains a comma, it will be split
	var splitResults = myTempString.split(".");
	var myCounter = splitResults[0].length;
	if (myCounter > 3) {
		while(myCounter > 0) {
			if (myCounter > 3) {
				newString = separator + splitResults[0].substr(myCounter - 3,3) + newString;
			}
			else {
				newString = splitResults[0].substr(0,myCounter) + newString;
			}
			myCounter -= 3;
		}
	}
	else {
		newString = splitResults[0];
	}
	//concatenate if it contains a comma
	if (splitResults[1]) {
		newString = newString + "." + splitResults[1];
	}
	return newString;
}

/**
 * writes a status text message out to a SVG text element's first child
 * @param {String} statusText	the text message to be displayed
 * @version 1.0 (2007-04-30)
 */
 function statusChange(statusText) {
	document.getElementById("statusText").firstChild.nodeValue = "Statusbar: " + statusText;
}

/**
 * scales an SVG element, requires that the element has an x and y attribute (e.g. circle, ellipse, use element, etc.)
 * @param {dom::Event} evt		the evt object that triggered the scaling
 * @param {Number} factor	the scaling factor
 * @version 1.0 (2007-04-30)
 */
function scaleObject(evt,factor) {
	//reference to the currently selected object
	var element = evt.currentTarget;
	var myX = element.getAttributeNS(null,"x");
	var myY = element.getAttributeNS(null,"y");
	var newtransform = "scale(" + factor + ") translate(" + (myX * 1 / factor - myX) + " " + (myY * 1 / factor - myY) +")";
	element.setAttributeNS(null,'transform', newtransform);
}

/**
 * returns the transformation matrix (ctm) for the given node up to the root element
 * the basic use case is to provide a wrapper function for the missing SVGLocatable.getTransformToElement method (missing in ASV3)
 * @param {svg::SVGTransformable} node		the node reference for the SVGElement the ctm is queried
 * @return CTM								the current transformation matrix from the given node to the root element
 * @type svg::SVGMatrix
 * @version 1.0 (2007-05-01)
 * @credits <a href="http://www.kevlindev.com/tutorials/basics/transformations/toUserSpace/index.htm">Kevin Lindsey (toUserSpace)</a>
 * @see #getTransformToElement
 */
function getTransformToRootElement(node) {
 	try {
		//this part is for fully conformant players (like Opera, Batik, Firefox, Safari ...)
		var CTM = node.getTransformToElement(document.documentElement);
	}
	catch (ex) {
		//this part is for ASV3 or other non-conformant players
		// Initialize our CTM the node's Current Transformation Matrix
		var CTM = node.getCTM();
		// Work our way through the ancestor nodes stopping at the SVG Document
		while ( ( node = node.parentNode ) != document ) {
			// Multiply the new CTM to the one with what we have accumulated so far
			CTM = node.getCTM().multiply(CTM);
		}
	}
	return CTM;
}

/**
 * returns the transformation matrix (ctm) for the given dom::Node up to a different dom::Node
 * the basic use case is to provide a wrapper function for the missing SVGLocatable.getTransformToElement method (missing in ASV3)
 * @param {svg::SVGTransformable} node			the node reference for the element the where the ctm should be calculated from
 * @param {svg::SVGTransformable} targetNode	the target node reference for the element the ctm should be calculated to
 * @return CTM									the current transformation matrix from the given node to the target element
 * @type svg::SVGMatrix
 * @version 1.0 (2007-05-01)
 * @credits <a href="http://www.kevlindev.com/tutorials/basics/transformations/toUserSpace/index.htm">Kevin Lindsey (toUserSpace)</a>
 * @see #getTransformToRootElement
 */
function getTransformToElement(node,targetNode) {
    try {
        //this part is for fully conformant players
        var CTM = node.getTransformToElement(targetNode);
    }
    catch (ex) {
  		//this part is for ASV3 or other non-conformant players
		// Initialize our CTM the node's Current Transformation Matrix
		var CTM = node.getCTM();
		// Work our way through the ancestor nodes stopping at the SVG Document
		while ( ( node = node.parentNode ) != targetNode ) {
			// Multiply the new CTM to the one with what we have accumulated so far
			CTM = node.getCTM().multiply(CTM);
		}
    }
    return CTM;
}

/**
 * converts HSV to RGB values
 * @param {Number} hue		the hue value (between 0 and 360)
 * @param {Number} sat		the saturation value (between 0 and 1)
 * @param {Number} val		the value value (between 0 and 1)
 * @return rgbArr			the rgb values (associative array or object, the keys are: red,green,blue), all values are scaled between 0 and 255
 * @type Object
 * @version 1.0 (2007-05-01)
 * @see #rgb2hsv
 */
function hsv2rgb(hue,sat,val) {
	var rgbArr = new Object();
	if ( sat == 0) {
		rgbArr["red"] = Math.round(val * 255);
		rgbArr["green"] = Math.round(val * 255);
		rgbArr["blue"] = Math.round(val * 255);
	}
	else {
		var h = hue / 60;
		var i = Math.floor(h);
		var f = h - i;
		if (i % 2 == 0) {
			f = 1 - f;
		}
		var m = val * (1 - sat); 
		var n = val * (1 - sat * f);
		switch(i) {
			case 0:
				rgbArr["red"] = val;
				rgbArr["green"] = n;
				rgbArr["blue"] = m;
				break;
			case 1:
				rgbArr["red"] = n;
				rgbArr["green"] = val;
				rgbArr["blue"] = m;
				break;
			case 2:
				rgbArr["red"] = m;
				rgbArr["green"] = val;
				rgbArr["blue"] = n;
				break;
			case 3:
				rgbArr["red"] = m;
				rgbArr["green"] = n;
				rgbArr["blue"] = val;
				break;
			case 4:
				rgbArr["red"] = n;
				rgbArr["green"] = m;
				rgbArr["blue"] = val;
				break;
			case 5:
				rgbArr["red"] = val;
				rgbArr["green"] = m;
				rgbArr["blue"] = n;
				break;
			case 6:
				rgbArr["red"] = val;
				rgbArr["green"] = n;
				rgbArr["blue"] = m;
				break;
		}
		rgbArr["red"] = Math.round(rgbArr["red"] * 255);
		rgbArr["green"] = Math.round(rgbArr["green"] * 255);
		rgbArr["blue"] = Math.round(rgbArr["blue"] * 255);
	}
	return rgbArr;
}

/**
 * converts RGB to HSV values
 * @param {Number} red		the hue value (between 0 and 255)
 * @param {Number} green	the saturation value (between 0 and 255)
 * @param {Number} blue		the value value (between 0 and 255)
 * @return hsvArr			the hsv values (associative array or object, the keys are: hue (0-360),sat (0-1),val (0-1))
 * @type Object
 * @version 1.0 (2007-05-01)
 * @see #hsv2rgb
 */
function rgb2hsv(red,green,blue) {
	var hsvArr = new Object();
	red = red / 255;
	green = green / 255;
	blue = blue / 255;
	myMax = Math.max(red, Math.max(green,blue));
	myMin = Math.min(red, Math.min(green,blue));
	v = myMax;
	if (myMax > 0) {
		s = (myMax - myMin) / myMax;
	}
	else {
		s = 0;
	}
	if (s > 0) {
		myDiff = myMax - myMin;
		rc = (myMax - red) / myDiff;
		gc = (myMax - green) / myDiff;
		bc = (myMax - blue) / myDiff;
		if (red == myMax) {
			h = (bc - gc) / 6;
		}
		if (green == myMax) {
			h = (2 + rc - bc) / 6;
		}
		if (blue == myMax) {
			h = (4 + gc - rc) / 6;
		}
	}
	else {
		h = 0;
	}
	if (h < 0) {
		h += 1;
	}
	hsvArr["hue"] = Math.round(h * 360);
	hsvArr["sat"] = s;
	hsvArr["val"] = v;
	return hsvArr;
}

/**
 * populates an array such that it can be addressed by both a key or an index nr,
 * note that both Arrays need to be of the same length
 * @param {Array} arrayKeys		the array containing the keys
 * @param {Array} arrayValues	the array containing the values
 * @return returnArray			the resulting array containing both associative values and also a regular indexed array
 * @type Array
 * @version 1.0 (2007-05-01)
 */
function arrayPopulate(arrayKeys,arrayValues) {
	var returnArray = new Array();
	if (arrayKeys.length != arrayValues.length) {
		alert("error: arrays do not have the same length!");
	}
	else {
		for (i=0;i<arrayKeys.length;i++) {
			returnArray[arrayKeys[i]] = arrayValues[i];
		}
	}
	return returnArray;
}

/**
 * Wrapper object for network requests, uses getURL or XMLHttpRequest depending on availability
 * The callBackFunction receives a XML or text node representing the rootElement
 * of the fragment received or the return text, depending on the returnFormat. 
 * See also the following <a href="http://www.carto.net/papers/svg/network_requests/">documentation</a>.
 * @class this is a wrapper object to provide network request functionality (get|post)
 * @param {String} url												the URL/IRI of the network resource to be called
 * @param {Function|Object} callBackFunction						the callBack function or object that is called after the data was received, in case of an object, the method 'receiveData' is called; both the function and the object's 'receiveData' method get 2 return parameters: 'node.firstChild'|text (the root element of the XML or text resource), this.additionalParams (if defined) 
 * @param {String} returnFormat										the return format, either 'xml' or 'json' (or text)
 * @param {String} method											the method of the network request, either 'get' or 'post'
 * @param {String|Undefined} postText								the String containing the post text (optional) or Undefined (if not a 'post' request)
 * @param {Object|Array|String|Number|Undefined} additionalParams	additional parameters that will be passed to the callBackFunction or object (optional) or Undefined
 * @return a new getData instance
 * @type getData
 * @constructor
 * @version 1.0 (2007-02-23)
 */
function getData(url,callBackFunction,returnFormat,method,postText,additionalParams) {
	this.url = url;
	this.callBackFunction = callBackFunction;
	this.returnFormat = returnFormat;
	this.method = method;
	this.additionalParams = additionalParams;
	if (method != "get" && method != "post") {
		alert("Error in network request: parameter 'method' must be 'get' or 'post'");
	}
	this.postText = postText;
	this.xmlRequest = null; //@private reference to the XMLHttpRequest object
} 

/**
 * triggers the network request defined in the constructor
 */
getData.prototype.getData = function() {
	//call getURL() if available
	if (window.getURL) {
		if (this.method == "get") {
			getURL(this.url,this);
		}
		if (this.method == "post") {
			postURL(this.url,this.postText,this);
		}
	}
	//or call XMLHttpRequest() if available
	else if (window.XMLHttpRequest) {
		var _this = this;
		this.xmlRequest = new XMLHttpRequest();
		if (this.method == "get") {
			if (this.returnFormat == "xml") {
				this.xmlRequest.overrideMimeType("text/xml");
			}
			this.xmlRequest.open("GET",this.url,true);
		}
		if (this.method == "post") {
			this.xmlRequest.open("POST",this.url,true);
		}
		this.xmlRequest.onreadystatechange = function() {_this.handleEvent()};
		if (this.method == "get") {
			this.xmlRequest.send(null);
		}
		if (this.method == "post") {
			//test if postText exists and is of type string
			var reallyPost = true;
			if (!this.postText) {
				reallyPost = false;
				alert("Error in network post request: missing parameter 'postText'!");
			}
			if (typeof(this.postText) != "string") {
				reallyPost = false;
				alert("Error in network post request: parameter 'postText' has to be of type 'string')");
			}
			if (reallyPost) {
				this.xmlRequest.send(this.postText);
			}
		}
	}
	//write an error message if neither method is available
	else {
		alert("your browser/svg viewer neither supports window.getURL nor window.XMLHttpRequest!");
	}	
}

/**
 * this is the callback method for the getURL() or postURL() case
 * @private
 */
getData.prototype.operationComplete = function(data) {
	//check if data has a success property
	if (data.success) {
		//parse content of the XML format to the variable "node"
		if (this.returnFormat == "xml") {
			//convert the text information to an XML node and get the first child
			var node = parseXML(data.content,document);
			//distinguish between a callback function and an object
			if (typeof(this.callBackFunction) == "function") {
				this.callBackFunction(node.firstChild,this.additionalParams);
			}
			if (typeof(this.callBackFunction) == "object") {
				this.callBackFunction.receiveData(node.firstChild,this.additionalParams);
			}
		}
		if (this.returnFormat == "json") {
			if (typeof(this.callBackFunction) == "function") {
				this.callBackFunction(data.content,this.additionalParams);
			}
			if (typeof(this.callBackFunction) == "object") {
				this.callBackFunction.receiveData(data.content,this.additionalParams);
			}			
		}
	}
	else {
		alert("something went wrong with dynamic loading of geometry!");
	}
}

/**
 * this is the callback method for the XMLHttpRequest case
 * @private
 */
getData.prototype.handleEvent = function() {
	if (this.xmlRequest.readyState == 4) {
		if (this.returnFormat == "xml") {
			//we need to import the XML node first
			var importedNode = document.importNode(this.xmlRequest.responseXML.documentElement,true);
			if (typeof(this.callBackFunction) == "function") {
				this.callBackFunction(importedNode,this.additionalParams);
			}
			if (typeof(this.callBackFunction) == "object") {
				this.callBackFunction.receiveData(importedNode,this.additionalParams);
			}			
		}
		if (this.returnFormat == "json") {
			if (typeof(this.callBackFunction) == "function") {
				this.callBackFunction(this.xmlRequest.responseText,this.additionalParams);
			}
			if (typeof(this.callBackFunction) == "object") {
				this.callBackFunction.receiveData(this.xmlRequest.responseText,this.additionalParams);
			}			
		}		
	}	
}

/**
 * Serializes an XML node and returns a string representation. Wrapper function to hide implementation differences. 
 * This can be used for debugging purposes or to post data to a server or network resource.
 * @param {dom::Node} node		the DOM node reference
 * @return textRepresentation	the String representation of the XML node
 * @type String
 * @version 1.0 (2007-05-01)
 * @see getData
 */
function serializeNode(node) {
  if (typeof XMLSerializer != 'undefined') {
    return new XMLSerializer().serializeToString(node);
  }
  else if (typeof node.xml != 'undefined') {
    return node.xml;
  }
  else if (typeof printNode != 'undefined') {
    return printNode(node);
  }
  else if (typeof Packages != 'undefined') {
    try {
      var stringWriter = new java.io.StringWriter();
      Packages.org.apache.batik.dom.util.DOMUtilities.writeNode(node,stringWriter);
      return stringWriter.toString();
    }
    catch (e) {
       alert("Sorry, your SVG viewer does not support the printNode/serialize function.");
       return '';
    }
  }
  else {
    alert("Sorry, your SVG viewer does not support the printNode/serialize function.");
    return '';
  }
}

/**
 * Starts a SMIL animation element with the given id by triggering the '.beginElement()' method. 
 * This is a convenience (shortcut) function. 
 * @param {String} id		a valid id of a valid SMIL animation element
 * @version 1.0 (2007-05-01)
 */
//starts an animtion with the given id
//this function is useful in combination with window.setTimeout()
function startAnimation(id) {
		document.getElementById(id).beginElement();
}]]></script><script xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" type="text/ecmascript"><![CDATA[var isHTML = [ false ];]]></script><script xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" type="text/ecmascript" originalSource="/Users/duncan/Rpackages/SVGAnnotation/SVGGUI/timer.js"><![CDATA[// source/credits: "Algorithm": http://www.codingforums.com/showthread.php?s=&threadid=10531
// The constructor should be called with
// the parent object (optional, defaults to window).

function Timer(){
    this.obj = (arguments.length)?arguments[0]:window;
    return this;
}

// The set functions should be called with:
// - The name of the object method (as a string) (required)
// - The millisecond delay (required)
// - Any number of extra arguments, which will all be
//   passed to the method when it is evaluated.

Timer.prototype.setInterval = function(func, msec){
    var i = Timer.getNew();
    var t = Timer.buildCall(this.obj, i, arguments);
    Timer.set[i].timer = window.setInterval(t,msec);
    return i;
}
Timer.prototype.setTimeout = function(func, msec){
    var i = Timer.getNew();
    Timer.buildCall(this.obj, i, arguments);
    Timer.set[i].timer = window.setTimeout("Timer.callOnce("+i+");",msec);
    return i;
}

// The clear functions should be called with
// the return value from the equivalent set function.

Timer.prototype.clearInterval = function(i){
    if(!Timer.set[i]) return;
    window.clearInterval(Timer.set[i].timer);
    Timer.set[i] = null;
}
Timer.prototype.clearTimeout = function(i){
    if(!Timer.set[i]) return;
    window.clearTimeout(Timer.set[i].timer);
    Timer.set[i] = null;
}

// Private data

Timer.set = new Array();
Timer.buildCall = function(obj, i, args){
    var t = "";
    Timer.set[i] = new Array();
    if(obj != window){
        Timer.set[i].obj = obj;
        t = "Timer.set["+i+"].obj.";
    }
    t += args[0]+"(";
    if(args.length > 2){
        Timer.set[i][0] = args[2];
        t += "Timer.set["+i+"][0]";
        for(var j=1; (j+2)<args.length; j++){
            Timer.set[i][j] = args[j+2];
            t += ", Timer.set["+i+"]["+j+"]";
    }}
    t += ");";
    Timer.set[i].call = t;
    return t;
}
Timer.callOnce = function(i){
    if(!Timer.set[i]) return;
    eval(Timer.set[i].call);
    Timer.set[i] = null;
}
Timer.getNew = function(){
    var i = 0;
    while(Timer.set[i]) i++;
    return i;
}]]></script><script xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" type="text/ecmascript"><![CDATA[var isHTML = [ false ];]]></script><script xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" type="text/ecmascript" originalSource="/Users/duncan/Rpackages/SVGAnnotation/SVGGUI/checkbox_and_radiobutton.js"><![CDATA[/*
Scripts to create interactive checkboxes and radio buttons in SVG using ECMA script
Copyright (C) <2007>  <Andreas Neumann>
Version 1.1.3, 2007-08-09
neumann@karto.baug.ethz.ch
http://www.carto.net/
http://www.carto.net/neumann/

Credits:
* Guy Morton for providing a fix to let users toggle checkboxes by clicking on text labels
* Bruce Rindahl for providing the bugfix described in version 1.1.2
* Simon Shutter for providing a fix for the ASV in IE crash when reloading the SVG file after calling the .remove() method on a checkbox

----

Documentation: http://www.carto.net/papers/svg/gui/checkbox_and_radiobutton/

----

current version: 1.1.3

version history:
1.0 (2006-03-13)
initial version

1.1 (2006-07-11)
text labels are now clickable (thanks to Guy Morton)
added method .moveTo() to move checkbox to a different location
introduced new constructor parameter labelYOffset to allow more flexible placement of the text label

1.1.1 (2007-02-06)
added cursor pointer to the text label and use element representing the checkBox

1.1.2 (2007-04-19)
bug fix: this.selectedIndex was not correctly initialized in method addCheckBox of the radioButtonGroup object

1.1.3 (2007-08-09)
bug fix: the method .remove() was slightly modified (using removeEventListener) for avoiding a crash related to the method after reloading the SVG file

-------


This ECMA script library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library (lesser_gpl.txt); if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

----

original document site: http://www.carto.net/papers/svg/gui/checkbox_and_radiobutton/
Please contact the author in case you want to use code or ideas commercially.
If you use this code, please include this copyright header, the included full
LGPL 2.1 text and read the terms provided in the LGPL 2.1 license
(http://www.gnu.org/copyleft/lesser.txt)

-------------------------------

Please report bugs and send improvements to neumann@karto.baug.ethz.ch
If you use this control, please link to the original (http://www.carto.net/papers/svg/gui/checkbox_and_radiobutton/)
somewhere in the source-code-comment or the "about" of your project and give credits, thanks!

*/

function checkBox(id,parentNode,x,y,checkboxId,checkcrossId,checkedStatus,labelText,textStyles,labelDistance,labelYOffset,radioButtonGroup,functionToCall) {
	var nrArguments = 13;
	var createCheckbox= true;
	if (arguments.length == nrArguments) {	
		this.id = id; //an internal id, this id is not used in the SVG Dom tree
		this.parentNode = parentNode; //the parentNode, string or nodeReference
		this.x = x; //the center of the checkBox
		this.y = y; //the center of the checkBox
		this.checkboxId = checkboxId; //the id of the checkbox symbol (background)
		this.checkcrossId = checkcrossId; //the id of the checkbox symbol (foreground), pointer-events should be set to "none"
		this.checkedStatus = checkedStatus; //a status variable (true|false), indicates if checkbox is on or off
		this.labelText = labelText; //the text of the checkbox label to be displayed, use undefined or empty string if you don't need a label text
		this.textStyles = textStyles; //an array of literals containing the text settings
		if (!this.textStyles["font-size"]) {
			this.textStyles["font-size"] = 12;
		}
		this.labelDistance = labelDistance; //a distance defined from the center of the checkbox to the left of the text of the label
		this.labelYOffset = labelYOffset; //a y offset value for the text label in relation to the checkbox symbol center
		this.radioButtonGroup = radioButtonGroup; //a reference to a radio button group, if this is a standalone checkBox, just use the parameter undefined
		this.functionToCall = functionToCall; //the function to call after triggering checkBox
		this.exists = true; //status that indicates if checkbox exists or not, is set to false after method .remove() was called
		this.label = undefined; //later a reference to the label text node
	}
	else {
		createCheckbox = false;
		alert("Error in checkbox ("+id+"): wrong nr of arguments! You have to pass over "+nrArguments+" parameters.");
	}
	if (createCheckbox) {
		//timer stuff
		this.timer = new Timer(this); //a Timer instance for calling the functionToCall
		if (this.radioButtonGroup) {
			this.timerMs = 0;
		}
		else {
			this.timerMs = 200; //a constant of this object that is used in conjunction with the timer - functionToCall is called after 200 ms
		}
		//create checkbox
		this.createCheckBox();
	}
	else {
		alert("Could not create checkbox with id '"+id+"' due to errors in the constructor parameters");		
	}
}

//this method creates all necessary checkbox geometry
checkBox.prototype.createCheckBox = function() {
	if (typeof(this.parentNode) == "string") {
		this.parentNode = document.getElementById(this.parentNode);
	}
	//create checkbox
	this.checkBox = document.createElementNS(svgNS,"use");
	this.checkBox.setAttributeNS(null,"x",this.x);
	this.checkBox.setAttributeNS(null,"y",this.y);
	this.checkBox.setAttributeNS(xlinkNS,"href","#"+this.checkboxId);
	this.checkBox.addEventListener("click",this,false);
	this.checkBox.setAttributeNS(null,"cursor","pointer");
	this.parentNode.appendChild(this.checkBox);
	//create checkcross
	this.checkCross = document.createElementNS(svgNS,"use");
	this.checkCross.setAttributeNS(null,"x",this.x);
	this.checkCross.setAttributeNS(null,"y",this.y);
	this.checkCross.setAttributeNS(xlinkNS,"href","#"+this.checkcrossId);
	this.parentNode.appendChild(this.checkCross);
	if (this.checkedStatus == false) {
		this.checkCross.setAttributeNS(null,"display","none");
	}
	//create label, if any
	if (this.labelText) {
		if (this.labelText.length > 0) {
			this.label = document.createElementNS(svgNS,"text");
			for (var attrib in this.textStyles) {
				var value = this.textStyles[attrib];
				if (attrib == "font-size") {
					value += "px";
				}
				this.label.setAttributeNS(null,attrib,value);
			}
			this.label.setAttributeNS(null,"x",(this.x + this.labelDistance));
			this.label.setAttributeNS(null,"y",(this.y + this.labelYOffset));
			this.label.setAttributeNS(null,"cursor","pointer");
			var labelTextNode = document.createTextNode(this.labelText);
			this.label.appendChild(labelTextNode);
			this.label.setAttributeNS(null,"pointer-events","all");
			this.label.addEventListener("click",this,false);
			this.parentNode.appendChild(this.label);
		}
	}
	if (this.radioButtonGroup) {
		this.radioButtonGroup.addCheckBox(this);
	}
}

checkBox.prototype.handleEvent = function(evt) {
	if (evt.type == "click") {
		if (this.checkedStatus == true) {
			this.checkCross.setAttributeNS(null,"display","none");
			this.checkedStatus = false;
		}
		else {
			this.checkCross.setAttributeNS(null,"display","inline");
			this.checkedStatus = true;
		}
	}
	this.timer.setTimeout("fireFunction",this.timerMs);
}

checkBox.prototype.fireFunction = function() {
	if (this.radioButtonGroup) {
		this.radioButtonGroup.selectById(this.id,true);
	}
	else {
		if (typeof(this.functionToCall) == "function") {
			this.functionToCall(this.id,this.checkedStatus,this.labelText);
		}
		if (typeof(this.functionToCall) == "object") {
			this.functionToCall.checkBoxChanged(this.id,this.checkedStatus,this.labelText);
		}
		if (typeof(this.functionToCall) == undefined) {
			return;
		}
	}
}

checkBox.prototype.check = function(FireFunction) {
	this.checkCross.setAttributeNS(null,"display","inherit");
	this.checkedStatus = true;
	if (FireFunction) {
		this.timer.setTimeout("fireFunction",this.timerMs);
	}
}

checkBox.prototype.uncheck = function(FireFunction) {
	this.checkCross.setAttributeNS(null,"display","none");
	this.checkedStatus = false;
	if (FireFunction) {
		this.timer.setTimeout("fireFunction",this.timerMs);
	}
}

//move checkbox to a different position
checkBox.prototype.moveTo = function(moveX,moveY) {
    this.x = moveX;
    this.y = moveY;
    //move checkbox
 	this.checkBox.setAttributeNS(null,"x",this.x);
	this.checkBox.setAttributeNS(null,"y",this.y);
    //move checkcross
	this.checkCross.setAttributeNS(null,"x",this.x);
	this.checkCross.setAttributeNS(null,"y",this.y);
    //move text label
	if (this.labelText) {
		this.label.setAttributeNS(null,"x",(this.x + this.labelDistance));
		this.label.setAttributeNS(null,"y",(this.y + this.labelYOffset));
    }
}

checkBox.prototype.remove = function(FireFunction) {
	this.checkBox.removeEventListener("click",this,false);
	this.parentNode.removeChild(this.checkBox);
	this.parentNode.removeChild(this.checkCross);
	if (this.label) {
		this.parentNode.removeChild(this.label);	
	}
	this.exists = false;
}

checkBox.prototype.setLabelText = function(labelText) {
	this.labelText = labelText
	if (this.label) {
		this.label.firstChild.nodeValue = labelText;
	}
	else {
		if (this.labelText.length > 0) {
			this.label = document.createElementNS(svgNS,"text");
			for (var attrib in this.textStyles) {
				value = this.textStyles[attrib];
				if (attrib == "font-size") {
					value += "px";
				}
				this.label.setAttributeNS(null,attrib,value);
			}
			this.label.setAttributeNS(null,"x",(this.x + this.labelDistance));
			this.label.setAttributeNS(null,"y",(this.y + this.textStyles["font-size"] * 0.3));
			var labelTextNode = document.createTextNode(this.labelText);
			this.label.appendChild(labelTextNode);
			this.parentNode.appendChild(this.label);
		}	
	}
}

/* start of the radioButtonGroup object */

function radioButtonGroup(id,functionToCall) {
	var nrArguments = 2;
	if (arguments.length == nrArguments) {	
		this.id = id;
		if (typeof(functionToCall) == "function" || typeof(functionToCall) == "object" || typeof(functionToCall) == undefined) {
			this.functionToCall = functionToCall;
		}
		else {
			alert("Error in radiobutton with ("+id+"): argument functionToCall is not of type 'function', 'object' or undefined!");		
		}
		this.checkBoxes = new Array(); //this array will hold checkbox objects
		this.selectedId = undefined; //holds the id of the active radio button
		this.selectedIndex = undefined; //holds the index of the active radio button
		//timer stuff
		this.timer = new Timer(this); //a Timer instance for calling the functionToCall
		this.timerMs = 200; //a constant of this object that is used in conjunction with the timer - functionToCall is called after 200 ms
	}
	else {
		alert("Error in radiobutton with ("+id+"): wrong nr of arguments! You have to pass over "+nrArguments+" parameters.");
	}
}

radioButtonGroup.prototype.addCheckBox = function(checkBoxObj) {
	this.checkBoxes.push(checkBoxObj);
	if (checkBoxObj.checkedStatus) {
		this.selectedId = checkBoxObj.id;
		this.selectedIndex = this.checkBoxes.length - 1;
	}
}

//change radio button selection by id
radioButtonGroup.prototype.selectById = function(cbId,fireFunction) {
	var found = false;
	for (var i=0;i<this.checkBoxes.length;i++) {
		if (this.checkBoxes[i].id == cbId) {
			this.selectedId = cbId;
			this.selectedIndex = i;
			if (this.checkBoxes[i].checkedStatus == false) {
				this.checkBoxes[i].check(false);
			}
			found = true;
		}
		else {
			this.checkBoxes[i].uncheck(false);
		}
	}
	if (found) {
		if (fireFunction) {
			this.timer.setTimeout("fireFunction",this.timerMs);
		}
	}
	else {
		alert("Error in radiobutton with ("+this.id+"): could not find checkbox with id '"+cbId+"'");	
	}
}

//change radio button selection by label name
radioButtonGroup.prototype.selectByLabelname = function(labelName,fireFunction) {
	var id = -1;
	for (var i=0;i<this.checkBoxes.length;i++) {
		if (this.checkBoxes[i].labelText == labelName) {
			id = this.checkBoxes[i].id;
		}
	}
	if (id == -1) {
		alert("Error in radiobutton with ("+this.id+"): could not find checkbox with label '"+labelName+"'");
	}
	else {
		this.selectById(id,fireFunction);	
	}
}

radioButtonGroup.prototype.fireFunction = function() {
	if (typeof(this.functionToCall) == "function") {
		this.functionToCall(this.id,this.selectedId,this.checkBoxes[this.selectedIndex].labelText);
	}
	if (typeof(this.functionToCall) == "object") {
		this.functionToCall.radioButtonChanged(this.id,this.selectedId,this.checkBoxes[this.selectedIndex].labelText);
	}
	if (typeof(this.functionToCall) == undefined) {
		return;
	}
}]]></script><script xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" type="text/ecmascript"><![CDATA[var isHTML = [ false ];]]></script><script xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" type="text/ecmascript" originalSource="/Users/duncan/Rpackages/SVGAnnotation/SVGGUI/hideSVGElements.js"><![CDATA[var checkBoxes = new Array();
var radioGroupBandwidth;
var numPanels = 0;

function createRadioBoxList(count, x, labels, toggleCB, prefix, npanel) {
	
		//labeltext styles
    var labeltextStyles = {"font-family":"Arial,Helvetica","fill":"dimgray","font-size":15};
		//variables for label placement
    var labelDistance = 12;
    var labelYOffset = 5.5;

    var y = 50; 
    var i;

    numPanels = npanel;

    for(i = 1; i <= count; i++) {
          checkBoxes[i] = new checkBox(prefix + i, "checkboxes", x, y + (i-1) * 18, "checkBoxRect", "checkBoxCross", true, 
                                       labels[i-1], labeltextStyles,labelDistance,labelYOffset,undefined, toggleCB);

    }
}

function toggle(id, status, label) {
    var onOrOff = "hidden";

    if (status) {
	onOrOff = "visible";
    }
    document.getElementById(id).setAttribute('visibility', onOrOff);
}


function togglePanel(id, status, label) {
    var onOrOff = "hidden";
    var p;

    if (status) {
	onOrOff = "visible";
    }

    for( p = 1; p <= numPanels; p++) {
       pid = "panel-" + p + "-" + id;
       document.getElementById(pid).setAttribute('visibility', onOrOff);
    }
}]]></script></svg>
